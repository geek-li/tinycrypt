; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\odzhan\tinycrypt\block\rc5\rc5.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_rc5_setkey
; Function compile flags: /Ogspy
;	COMDAT _rc5_setkey
_TEXT	SEGMENT
_L$ = -20						; size = 16
tv80 = -4						; size = 4
_key$ = 8						; size = 4
_A$ = 12						; size = 4
_input$ = 12						; size = 4
_rc5_setkey PROC					; COMDAT
; File c:\odzhan\tinycrypt\block\rc5\rc5.c
; Line 33
	push	ebp
	mov	ebp, esp
	sub	esp, 20					; 00000014H
	push	ebx
	push	esi
; Line 38
	mov	esi, DWORD PTR _input$[ebp]
	push	edi
	lea	edi, DWORD PTR _L$[ebp]
	movsd
	movsd
	movsd
; Line 44
	xor	ebx, ebx
	movsd
	mov	ecx, -1209970333			; b7e15163H
	xor	eax, eax
$LL6@rc5_setkey:
; Line 45
	mov	edx, DWORD PTR _key$[ebp]
	mov	DWORD PTR [edx+eax*4], ecx
; Line 46
	sub	ecx, 1640531527				; 61c88647H
	inc	eax
	cmp	eax, 26					; 0000001aH
	jb	SHORT $LL6@rc5_setkey
; Line 49
	xor	edi, edi
	xor	edx, edx
	mov	DWORD PTR _A$[ebp], ebx
	mov	DWORD PTR tv80[ebp], 78			; 0000004eH
$LL18@rc5_setkey:
; Line 54
	mov	eax, DWORD PTR _key$[ebp]
	lea	ecx, DWORD PTR [eax+edx*4]
	mov	eax, DWORD PTR [ecx]
	add	eax, ebx
	add	eax, DWORD PTR _A$[ebp]
; Line 55
	lea	esi, DWORD PTR _L$[ebp+edi*4]
	rol	eax, 3
	mov	DWORD PTR [ecx], eax
	lea	ecx, DWORD PTR [ebx+eax]
	mov	DWORD PTR _A$[ebp], eax
	mov	eax, DWORD PTR [esi]
	add	eax, ebx
	add	eax, DWORD PTR _A$[ebp]
; Line 58
	push	26					; 0000001aH
	rol	eax, cl
	pop	ecx
	mov	DWORD PTR [esi], eax
	mov	ebx, eax
	lea	eax, DWORD PTR [edx+1]
	xor	edx, edx
	div	ecx
; Line 60
	inc	edi
; Line 61
	and	edi, 3
	dec	DWORD PTR tv80[ebp]
	jne	SHORT $LL18@rc5_setkey
	pop	edi
	pop	esi
	pop	ebx
; Line 63
	leave
	ret	0
_rc5_setkey ENDP
_TEXT	ENDS
PUBLIC	_rc5_crypt
; Function compile flags: /Ogspy
;	COMDAT _rc5_crypt
_TEXT	SEGMENT
_key$ = 8						; size = 4
_input$ = 12						; size = 4
_output$ = 16						; size = 4
_enc$ = 20						; size = 4
_rc5_crypt PROC						; COMDAT
; Line 66
	push	ebp
	mov	ebp, esp
; Line 77
	cmp	DWORD PTR _enc$[ebp], 1
	mov	eax, DWORD PTR _input$[ebp]
	push	esi
	mov	esi, DWORD PTR [eax]
	mov	eax, DWORD PTR [eax+4]
	jne	SHORT $LN8@rc5_crypt
; Line 78
	mov	ecx, DWORD PTR _key$[ebp]
	add	esi, DWORD PTR [ecx]
	lea	edx, DWORD PTR [ecx+4]
; Line 79
	add	eax, DWORD PTR [edx]
	add	edx, 4
; Line 80
	jmp	SHORT $LN7@rc5_crypt
$LN8@rc5_crypt:
; Line 81
	mov	edx, DWORD PTR _key$[ebp]
	add	edx, 100				; 00000064H
$LN7@rc5_crypt:
; Line 84
	push	ebx
	push	edi
	push	24					; 00000018H
	pop	edi
$LL6@rc5_crypt:
; Line 86
	cmp	DWORD PTR _enc$[ebp], 1
	jne	SHORT $LN3@rc5_crypt
; Line 87
	xor	esi, eax
	mov	ecx, eax
	rol	esi, cl
	add	esi, DWORD PTR [edx]
	add	edx, 4
; Line 88
	jmp	SHORT $LN2@rc5_crypt
$LN3@rc5_crypt:
; Line 89
	sub	eax, DWORD PTR [edx]
	push	32					; 00000020H
	pop	ecx
	sub	ecx, esi
	rol	eax, cl
	xor	eax, esi
	sub	edx, 4
$LN2@rc5_crypt:
; Line 92
	dec	edi
	mov	ecx, eax
; Line 93
	mov	eax, esi
; Line 94
	mov	esi, ecx
	jne	SHORT $LL6@rc5_crypt
; Line 96
	cmp	DWORD PTR _enc$[ebp], 0
	pop	edi
	pop	ebx
	jne	SHORT $LN1@rc5_crypt
; Line 97
	sub	eax, DWORD PTR [edx]
; Line 98
	sub	ecx, DWORD PTR [edx-4]
	mov	esi, ecx
$LN1@rc5_crypt:
; Line 100
	mov	ecx, DWORD PTR _output$[ebp]
	mov	DWORD PTR [ecx], esi
; Line 101
	mov	DWORD PTR [ecx+4], eax
	pop	esi
; Line 102
	pop	ebp
	ret	0
_rc5_crypt ENDP
_TEXT	ENDS
END
