; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\odzhan\tinycrypt\block\serpent\serpent.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_serpent_whiten
; Function compile flags: /Ogspy
;	COMDAT _serpent_whiten
_TEXT	SEGMENT
_dst$ = 8						; size = 4
_src$ = 12						; size = 4
_idx$ = 16						; size = 4
_serpent_whiten PROC					; COMDAT
; File c:\odzhan\tinycrypt\block\serpent\serpent.c
; Line 38
	mov	eax, DWORD PTR _idx$[esp-4]
	mov	ecx, DWORD PTR _dst$[esp-4]
	shl	eax, 4
	add	eax, DWORD PTR _src$[esp-4]
	push	4
	pop	edx
; Line 40
	sub	eax, ecx
	push	esi
$LL3@serpent_wh:
; Line 41
	mov	esi, DWORD PTR [eax+ecx]
	xor	DWORD PTR [ecx], esi
	add	ecx, 4
	dec	edx
	jne	SHORT $LL3@serpent_wh
	pop	esi
; Line 43
	ret	0
_serpent_whiten ENDP
_TEXT	ENDS
PUBLIC	_permute
; Function compile flags: /Ogspy
;	COMDAT _permute
_TEXT	SEGMENT
tv398 = -4						; size = 4
_out$ = 8						; size = 4
_in$ = 12						; size = 4
tv206 = 16						; size = 4
_type$ = 16						; size = 4
_permute PROC						; COMDAT
; Line 48
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ebx
; Line 53
	mov	ebx, DWORD PTR _out$[ebp]
	push	esi
	push	edi
	xor	eax, eax
; Line 57
	cmp	DWORD PTR _type$[ebp], 0
	mov	edi, ebx
	stosd
	stosd
	stosd
	stosd
	jne	SHORT $LN14@permute
; Line 59
	push	16					; 00000010H
	mov	edx, ebx
	pop	ebx
$LL31@permute:
; Line 60
	push	8
	xor	esi, esi
	pop	edi
$LL10@permute:
; Line 61
	mov	eax, esi
	and	eax, -2147483645			; 80000003H
	jns	SHORT $LN32@permute
	dec	eax
	or	eax, -4					; fffffffcH
	inc	eax
$LN32@permute:
	mov	ecx, DWORD PTR _in$[ebp]
	lea	ecx, DWORD PTR [ecx+eax*4]
	mov	al, BYTE PTR [ecx]
; Line 62
	shr	DWORD PTR [ecx], 1
; Line 63
	mov	cl, BYTE PTR [edx]
	and	al, 1
	shl	al, 7
	shr	cl, 1
	or	al, cl
	inc	esi
	dec	edi
	mov	BYTE PTR [edx], al
	jne	SHORT $LL10@permute
; Line 59
	inc	edx
	dec	ebx
	jne	SHORT $LL31@permute
; Line 66
	jmp	SHORT $LN4@permute
$LN14@permute:
; Line 68
	mov	eax, DWORD PTR _in$[ebp]
	mov	DWORD PTR tv398[ebp], 4
$LL30@permute:
; Line 69
	xor	esi, esi
	mov	DWORD PTR tv206[ebp], 32		; 00000020H
$LL3@permute:
; Line 70
	mov	cl, BYTE PTR [eax]
; Line 71
	shr	DWORD PTR [eax], 1
; Line 72
	mov	edx, esi
	and	cl, 1
	and	edx, -2147483645			; 80000003H
	jns	SHORT $LN33@permute
	dec	edx
	or	edx, -4					; fffffffcH
	inc	edx
$LN33@permute:
	lea	edx, DWORD PTR [ebx+edx*4]
	mov	edi, DWORD PTR [edx]
	movzx	ecx, cl
	shl	ecx, 31					; 0000001fH
	shr	edi, 1
	or	ecx, edi
	inc	esi
	dec	DWORD PTR tv206[ebp]
	mov	DWORD PTR [edx], ecx
	jne	SHORT $LL3@permute
; Line 68
	add	eax, 4
	dec	DWORD PTR tv398[ebp]
	jne	SHORT $LL30@permute
$LN4@permute:
	pop	edi
	pop	esi
	pop	ebx
; Line 76
	leave
	ret	0
_permute ENDP
_TEXT	ENDS
PUBLIC	_serpent_gen_w
; Function compile flags: /Ogspy
;	COMDAT _serpent_gen_w
_TEXT	SEGMENT
_b$ = 8							; size = 4
_i$ = 12						; size = 4
_serpent_gen_w PROC					; COMDAT
; Line 83
	mov	ecx, DWORD PTR _b$[esp-4]
	mov	eax, DWORD PTR [ecx+28]
	xor	eax, DWORD PTR [ecx+20]
	xor	eax, DWORD PTR [ecx+12]
	xor	eax, DWORD PTR [ecx]
	xor	eax, DWORD PTR _i$[esp-4]
	xor	eax, -1640531527			; 9e3779b9H
; Line 84
	rol	eax, 11					; 0000000bH
; Line 85
	ret	0
_serpent_gen_w ENDP
_TEXT	ENDS
PUBLIC	_serpent_subbytes
; Function compile flags: /Ogspy
;	COMDAT _serpent_subbytes
_TEXT	SEGMENT
_sb$ = -84						; size = 64
_sbox$ = -20						; size = 64
_tmp_blk$ = 44						; size = 64
_sbox_inv$ = 44						; size = 64
_blk$ = 116						; size = 4
_box_idx$ = 120						; size = 4
_type$ = 124						; size = 4
_serpent_subbytes PROC					; COMDAT
; Line 89
	push	ebp
	lea	ebp, DWORD PTR [esp-108]
	sub	esp, 192				; 000000c0H
; Line 116
	mov	eax, DWORD PTR _box_idx$[ebp]
	and	eax, 7
; Line 118
	cmp	DWORD PTR _type$[ebp], 0
	push	esi
	mov	DWORD PTR _sbox$[ebp], -1251336317	; b56a1f83H
	mov	DWORD PTR _sbox$[ebp+4], -922278690	; c90724deH
	mov	DWORD PTR _sbox$[ebp+8], -1526107441	; a50972cfH
	mov	DWORD PTR _sbox$[ebp+12], 1138134705	; 43d68eb1H
	mov	DWORD PTR _sbox$[ebp+16], -87845016	; fac39768H
	mov	DWORD PTR _sbox$[ebp+20], 632311325	; 25b04e1dH
	mov	DWORD PTR _sbox$[ebp+24], 916229104	; 369c8bf0H
	mov	DWORD PTR _sbox$[ebp+28], -444972515	; e57a421dH
	mov	DWORD PTR _sbox$[ebp+32], 1795963121	; 6b0c38f1H
	mov	DWORD PTR _sbox$[ebp+36], -672553902	; d7e9a452H
	mov	DWORD PTR _sbox$[ebp+40], -911953313	; c9a4b25fH
	mov	DWORD PTR _sbox$[ebp+44], 393055792	; 176d8e30H
	mov	DWORD PTR _sbox$[ebp+48], -1236771801	; b6485c27H
	mov	DWORD PTR _sbox$[ebp+52], 171831710	; 0a3df19eH
	mov	DWORD PTR _sbox$[ebp+56], -1299312687	; b28e0fd1H
	mov	DWORD PTR _sbox$[ebp+60], 1698278471	; 6539ac47H
	mov	DWORD PTR _sbox_inv$[ebp], -982906051	; c56a0b3dH
	mov	DWORD PTR _sbox_inv$[ebp+4], 681538785	; 289f74e1H
	mov	DWORD PTR _sbox_inv$[ebp+8], 1013965445	; 3c6fe285H
	mov	DWORD PTR _sbox_inv$[ebp+12], 181507915	; 0ad1974bH
	mov	DWORD PTR _sbox_inv$[ebp+16], 569069468	; 21eb4f9cH
	mov	DWORD PTR _sbox_inv$[ebp+20], 2055591472 ; 7a85d630H
	mov	DWORD PTR _sbox_inv$[ebp+24], -689210736 ; d6eb7a90H
	mov	DWORD PTR _sbox_inv$[ebp+28], 528755795	; 1f842c53H
	mov	DWORD PTR _sbox_inv$[ebp+32], -409323515 ; e79a3805H
	mov	DWORD PTR _sbox_inv$[ebp+36], 502557634	; 1df46bc2H
	mov	DWORD PTR _sbox_inv$[ebp+40], -317418760 ; ed1492f8H
	mov	DWORD PTR _sbox_inv$[ebp+44], 180827499	; 0ac7356bH
	mov	DWORD PTR _sbox_inv$[ebp+48], 104190383	; 0635d1afH
	mov	DWORD PTR _sbox_inv$[ebp+52], -1195213164 ; b8c27e94H
	mov	DWORD PTR _sbox_inv$[ebp+56], -1880500733 ; 8fe9d603H
	mov	DWORD PTR _sbox_inv$[ebp+60], 605715397	; 241a7bc5H
; Line 119
	lea	esi, DWORD PTR _sbox$[ebp+eax*8]
	je	SHORT $LN7@serpent_su
; Line 121
	lea	esi, DWORD PTR _sbox_inv$[ebp+eax*8]
$LN7@serpent_su:
	push	edi
; Line 124
	push	8
	xor	ecx, ecx
	pop	edi
$LL6@serpent_su:
; Line 125
	mov	eax, ecx
	shr	eax, 1
	mov	al, BYTE PTR [eax+esi]
; Line 126
	mov	dl, al
	and	dl, 15					; 0000000fH
; Line 127
	shr	al, 4
	mov	BYTE PTR _sb$[ebp+ecx], dl
	mov	BYTE PTR _sb$[ebp+ecx+1], al
	add	ecx, 2
	dec	edi
	jne	SHORT $LL6@serpent_su
; Line 130
	push	edi
	push	DWORD PTR _blk$[ebp]
	lea	eax, DWORD PTR _tmp_blk$[ebp]
	push	eax
	call	_permute
	add	esp, 12					; 0000000cH
	push	16					; 00000010H
	pop	esi
	lea	ecx, DWORD PTR _tmp_blk$[ebp]
	pop	edi
$LL3@serpent_su:
; Line 134
	movzx	eax, BYTE PTR [ecx]
	mov	edx, eax
	shr	edx, 4
	mov	dl, BYTE PTR _sb$[ebp+edx]
	shl	dl, 4
	and	eax, 15					; 0000000fH
	or	dl, BYTE PTR _sb$[ebp+eax]
	mov	BYTE PTR [ecx], dl
	inc	ecx
	dec	esi
	jne	SHORT $LL3@serpent_su
; Line 136
	push	1
	lea	eax, DWORD PTR _tmp_blk$[ebp]
	push	eax
	push	DWORD PTR _blk$[ebp]
	call	_permute
	add	esp, 12					; 0000000cH
	pop	esi
; Line 137
	add	ebp, 108				; 0000006cH
	leave
	ret	0
_serpent_subbytes ENDP
_TEXT	ENDS
PUBLIC	_serpent_lt
; Function compile flags: /Ogspy
;	COMDAT _serpent_lt
_TEXT	SEGMENT
_x3$ = -8						; size = 4
_x1$ = -4						; size = 4
_x$ = 8							; size = 4
_enc$ = 12						; size = 4
_serpent_lt PROC					; COMDAT
; Line 141
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 150
	cmp	DWORD PTR _enc$[ebp], 1
	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR [ecx+12]
	mov	eax, DWORD PTR [ecx]
	push	ebx
	mov	ebx, DWORD PTR [ecx+4]
	push	esi
	push	edi
	mov	edi, DWORD PTR [ecx+8]
	mov	DWORD PTR _x1$[ebp], ebx
	mov	DWORD PTR _x3$[ebp], edx
	jne	SHORT $LN2@serpent_lt
; Line 151
	rol	edi, 10					; 0000000aH
; Line 153
	mov	esi, ebx
	shl	esi, 7
	xor	esi, edi
	xor	esi, edx
	ror	eax, 5
; Line 154
	xor	eax, edx
	xor	eax, ebx
; Line 155
	ror	edx, 7
	mov	ecx, eax
; Line 157
	shl	eax, 3
	xor	edx, eax
	xor	edx, esi
	ror	ebx, 1
; Line 158
	xor	ebx, esi
	xor	ebx, ecx
; Line 159
	ror	esi, 3
; Line 160
	ror	ecx, 13					; 0000000dH
; Line 161
	jmp	SHORT $LN1@serpent_lt
$LN2@serpent_lt:
; Line 162
	rol	eax, 13					; 0000000dH
; Line 163
	rol	edi, 3
; Line 165
	mov	edx, eax
	shl	edx, 3
	xor	edx, DWORD PTR _x3$[ebp]
	mov	ebx, edi
	xor	ebx, DWORD PTR _x1$[ebp]
	xor	edx, edi
	xor	ebx, eax
; Line 166
	rol	ebx, 1
; Line 167
	rol	edx, 7
; Line 169
	mov	esi, ebx
	shl	esi, 7
	mov	ecx, edx
	xor	ecx, ebx
	xor	esi, edx
	xor	ecx, eax
	xor	esi, edi
; Line 170
	rol	ecx, 5
; Line 171
	ror	esi, 10					; 0000000aH
$LN1@serpent_lt:
; Line 174
	mov	eax, DWORD PTR _x$[ebp]
	pop	edi
; Line 176
	mov	DWORD PTR [eax+8], esi
	pop	esi
	mov	DWORD PTR [eax+4], ebx
	mov	DWORD PTR [eax], ecx
; Line 177
	mov	DWORD PTR [eax+12], edx
	pop	ebx
; Line 178
	leave
	ret	0
_serpent_lt ENDP
_TEXT	ENDS
PUBLIC	_serpent_setkey
; Function compile flags: /Ogspy
;	COMDAT _serpent_setkey
_TEXT	SEGMENT
_s_ws$ = -40						; size = 32
tv268 = -8						; size = 4
_i$ = -4						; size = 4
_key$ = 8						; size = 4
_input$ = 12						; size = 4
_serpent_setkey PROC					; COMDAT
; Line 182
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
; Line 191
	mov	eax, DWORD PTR _key$[ebp]
; Line 194
	and	DWORD PTR _i$[ebp], 0
	push	ebx
	push	esi
	mov	esi, DWORD PTR _input$[ebp]
	push	edi
	push	32					; 00000020H
	lea	edi, DWORD PTR _s_ws$[ebp]
	pop	ecx
	rep movsb
	mov	DWORD PTR tv268[ebp], eax
$LL13@serpent_se:
; Line 195
	mov	ebx, DWORD PTR tv268[ebp]
	xor	edx, edx
$LL14@serpent_se:
; Line 194
	mov	eax, DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR [edx+eax*4]
; Line 196
	push	eax
	lea	eax, DWORD PTR _s_ws$[ebp]
	push	eax
	call	_serpent_gen_w
	pop	ecx
	pop	ecx
; Line 197
	push	28					; 0000001cH
	mov	DWORD PTR [ebx], eax
	lea	esi, DWORD PTR _s_ws$[ebp+4]
	lea	edi, DWORD PTR _s_ws$[ebp]
	pop	ecx
	inc	edx
	add	ebx, 4
	rep movsb
; Line 198
	mov	DWORD PTR _s_ws$[ebp+28], eax
	cmp	edx, 4
	jb	SHORT $LL14@serpent_se
; Line 200
	push	0
	push	3
	pop	eax
	sub	eax, DWORD PTR _i$[ebp]
	push	eax
	push	DWORD PTR tv268[ebp]
	call	_serpent_subbytes
	add	esp, 12					; 0000000cH
	inc	DWORD PTR _i$[ebp]
	cmp	DWORD PTR _i$[ebp], 32			; 00000020H
	mov	DWORD PTR tv268[ebp], ebx
	jbe	SHORT $LL13@serpent_se
	pop	edi
	pop	esi
	pop	ebx
; Line 202
	leave
	ret	0
_serpent_setkey ENDP
_TEXT	ENDS
PUBLIC	_serpent_encrypt
; Function compile flags: /Ogspy
;	COMDAT _serpent_encrypt
_TEXT	SEGMENT
tv179 = 8						; size = 4
_in$ = 8						; size = 4
_i$ = 11						; size = 1
_key$ = 12						; size = 4
_enc$ = 16						; size = 4
_serpent_encrypt PROC					; COMDAT
; Line 205
	push	ebp
	mov	ebp, esp
	push	ebx
; Line 209
	mov	ebx, DWORD PTR _enc$[ebp]
	push	esi
; Line 212
	mov	esi, DWORD PTR _in$[ebp]
	push	edi
	xor	edi, edi
	inc	edi
	cmp	ebx, edi
	jne	SHORT $LN8@serpent_en
	push	32					; 00000020H
	push	DWORD PTR _key$[ebp]
	push	esi
	call	_serpent_whiten
; Line 214
	push	31					; 0000001fH
	pop	ebx
; Line 215
	push	edi
	push	ebx
	push	esi
	mov	BYTE PTR _i$[ebp], bl
	call	_serpent_subbytes
; Line 216
	push	ebx
	push	DWORD PTR _key$[ebp]
	push	esi
	call	_serpent_whiten
	add	esp, 36					; 00000024H
$LL7@serpent_en:
; Line 218
	push	edi
	push	esi
	call	_serpent_lt
	dec	BYTE PTR _i$[ebp]
	push	edi
	dec	ebx
	push	ebx
	push	esi
	call	_serpent_subbytes
	push	ebx
	push	DWORD PTR _key$[ebp]
	push	esi
	call	_serpent_whiten
	add	esp, 32					; 00000020H
	cmp	BYTE PTR _i$[ebp], 0
	jne	SHORT $LL7@serpent_en
; Line 220
	jmp	SHORT $LN4@serpent_en
$LN8@serpent_en:
; Line 223
	push	0
	push	DWORD PTR _key$[ebp]
	push	esi
	call	_serpent_whiten
; Line 224
	push	ebx
	push	0
	push	esi
	call	_serpent_subbytes
	add	esp, 24					; 00000018H
	mov	DWORD PTR tv179[ebp], 31		; 0000001fH
$LL3@serpent_en:
; Line 226
	push	ebx
	push	esi
	call	_serpent_lt
	push	edi
	push	DWORD PTR _key$[ebp]
	push	esi
	call	_serpent_whiten
	push	ebx
	push	edi
	push	esi
	call	_serpent_subbytes
	add	esp, 32					; 00000020H
	inc	edi
	dec	DWORD PTR tv179[ebp]
	jne	SHORT $LL3@serpent_en
; Line 228
	push	32					; 00000020H
	push	DWORD PTR _key$[ebp]
	push	esi
	call	_serpent_whiten
	add	esp, 12					; 0000000cH
$LN4@serpent_en:
	pop	edi
	pop	esi
	pop	ebx
; Line 230
	pop	ebp
	ret	0
_serpent_encrypt ENDP
_TEXT	ENDS
END
