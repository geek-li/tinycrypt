; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\odzhan\tinycrypt\block\chaskey\chas.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_C
CONST	SEGMENT
_C	DD	00H
	DD	087H
CONST	ENDS
PUBLIC	_chas_permute
; Function compile flags: /Ogspy
;	COMDAT _chas_permute
_TEXT	SEGMENT
_v$ = 8							; size = 4
_chas_permute PROC					; COMDAT
; File c:\odzhan\tinycrypt\block\chaskey\chas.c
; Line 26
	mov	eax, DWORD PTR _v$[esp-4]
	mov	ecx, DWORD PTR [eax]
; Line 28
	mov	edx, DWORD PTR [eax+4]
	push	ebx
	push	esi
	mov	esi, DWORD PTR [eax+12]
	push	edi
	mov	edi, DWORD PTR [eax+8]
	push	12					; 0000000cH
	pop	ebx
$LL3@chas_permu:
; Line 30
	add	ecx, edx
; Line 31
	rol	edx, 5
; Line 32
	xor	edx, ecx
; Line 34
	add	edi, esi
; Line 35
	rol	esi, 8
; Line 36
	xor	esi, edi
	rol	ecx, 16					; 00000010H
; Line 37
	add	ecx, esi
; Line 38
	rol	esi, 13					; 0000000dH
; Line 40
	add	edi, edx
	xor	esi, ecx
; Line 41
	rol	edx, 7
; Line 42
	xor	edx, edi
; Line 43
	rol	edi, 16					; 00000010H
	dec	ebx
	mov	DWORD PTR [eax], ecx
	jne	SHORT $LL3@chas_permu
; Line 45
	mov	DWORD PTR [eax+8], edi
	pop	edi
	mov	DWORD PTR [eax+12], esi
	pop	esi
	mov	DWORD PTR [eax+4], edx
	pop	ebx
	ret	0
_chas_permute ENDP
_TEXT	ENDS
PUBLIC	_TIMESTWO
; Function compile flags: /Ogspy
;	COMDAT _TIMESTWO
_TEXT	SEGMENT
_out$ = 8						; size = 4
_in$ = 12						; size = 4
_TIMESTWO PROC						; COMDAT
; Line 51
	mov	eax, DWORD PTR _in$[esp-4]
	mov	ecx, DWORD PTR [eax+12]
	shr	ecx, 31					; 0000001fH
	mov	edx, DWORD PTR _C[ecx*4]
	mov	ecx, DWORD PTR [eax]
	add	ecx, ecx
	xor	edx, ecx
	mov	ecx, DWORD PTR _out$[esp-4]
	mov	DWORD PTR [ecx], edx
; Line 52
	mov	edx, DWORD PTR [eax]
	push	esi
	mov	esi, DWORD PTR [eax+4]
	shr	edx, 31					; 0000001fH
	add	esi, esi
	or	edx, esi
	mov	DWORD PTR [ecx+4], edx
; Line 53
	mov	edx, DWORD PTR [eax+8]
	mov	esi, DWORD PTR [eax+4]
	add	edx, edx
	shr	esi, 31					; 0000001fH
	or	edx, esi
	mov	DWORD PTR [ecx+8], edx
; Line 54
	mov	edx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [eax+12]
	shr	edx, 31					; 0000001fH
	add	eax, eax
	or	edx, eax
	mov	DWORD PTR [ecx+12], edx
	pop	esi
; Line 55
	ret	0
_TIMESTWO ENDP
_TEXT	ENDS
PUBLIC	_subkeys
; Function compile flags: /Ogspy
;	COMDAT _subkeys
_TEXT	SEGMENT
_k1$ = 8						; size = 4
_k2$ = 12						; size = 4
_k$ = 16						; size = 4
_subkeys PROC						; COMDAT
; Line 58
	push	DWORD PTR _k$[esp-4]
	push	DWORD PTR _k1$[esp]
	call	_TIMESTWO
; Line 59
	push	DWORD PTR _k1$[esp+4]
	push	DWORD PTR _k2$[esp+8]
	call	_TIMESTWO
	add	esp, 16					; 00000010H
; Line 60
	ret	0
_subkeys ENDP
_TEXT	ENDS
PUBLIC	_chas_whiten
; Function compile flags: /Ogspy
;	COMDAT _chas_whiten
_TEXT	SEGMENT
_out$ = 8						; size = 4
_in$ = 12						; size = 4
_chas_whiten PROC					; COMDAT
; Line 64
	mov	eax, DWORD PTR _out$[esp-4]
	mov	ecx, DWORD PTR _in$[esp-4]
	push	esi
	push	16					; 00000010H
	sub	ecx, eax
	pop	esi
$LL3@chas_white:
; Line 65
	mov	dl, BYTE PTR [ecx+eax]
	xor	BYTE PTR [eax], dl
	inc	eax
	dec	esi
	jne	SHORT $LL3@chas_white
	pop	esi
; Line 67
	ret	0
_chas_whiten ENDP
_TEXT	ENDS
PUBLIC	_chaskey
; Function compile flags: /Ogspy
;	COMDAT _chaskey
_TEXT	SEGMENT
_lb$ = -36						; size = 16
_v$ = -20						; size = 16
_end$ = -4						; size = 4
_tag$ = 8						; size = 4
_taglen$ = 12						; size = 4
_M$ = 16						; size = 4
_m$ = 16						; size = 4
_mlen$ = 20						; size = 4
_k$ = 24						; size = 4
_k1$ = 28						; size = 4
_k2$ = 32						; size = 4
_chaskey PROC						; COMDAT
; Line 69
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
; Line 72
	mov	edx, DWORD PTR _mlen$[ebp]
	push	ebx
	mov	ebx, DWORD PTR _m$[ebp]
	push	esi
; Line 83
	mov	esi, DWORD PTR _k$[ebp]
	push	edi
	lea	eax, DWORD PTR [edx-1]
	shr	eax, 2
	and	eax, 1073741820				; 3ffffffcH
	push	16					; 00000010H
	lea	eax, DWORD PTR [ebx+eax*4]
	lea	edi, DWORD PTR _v$[ebp]
	pop	ecx
	mov	DWORD PTR _M$[ebp], ebx
	mov	DWORD PTR _end$[ebp], eax
	rep movsb
; Line 86
	test	edx, edx
	je	SHORT $LN2@chaskey
; Line 87
	cmp	ebx, eax
	je	SHORT $LN3@chaskey
	mov	esi, ebx
	lea	eax, DWORD PTR _v$[ebp]
	sub	esi, eax
$LL39@chaskey:
; Line 88
	xor	edi, edi
$LL11@chaskey:
	lea	eax, DWORD PTR _v$[ebp+edi]
	mov	cl, BYTE PTR [esi+eax]
	xor	BYTE PTR [eax], cl
	inc	edi
	cmp	edi, 16					; 00000010H
	jl	SHORT $LL11@chaskey
; Line 89
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	call	_chas_permute
	add	DWORD PTR _M$[ebp], 16			; 00000010H
	mov	eax, DWORD PTR _M$[ebp]
	add	esi, 16					; 00000010H
	pop	ecx
	cmp	eax, DWORD PTR _end$[ebp]
	jne	SHORT $LL39@chaskey
$LN3@chaskey:
; Line 94
	test	BYTE PTR _mlen$[ebp], 15		; 0000000fH
	jne	SHORT $LN2@chaskey
; Line 95
	mov	edx, DWORD PTR _k1$[ebp]
; Line 96
	mov	eax, DWORD PTR _M$[ebp]
; Line 97
	jmp	SHORT $LN1@chaskey
$LN2@chaskey:
; Line 101
	mov	esi, DWORD PTR _M$[ebp]
	mov	edx, DWORD PTR _k2$[ebp]
	sub	ebx, esi
	add	ebx, DWORD PTR _mlen$[ebp]
; Line 103
	lea	edi, DWORD PTR _lb$[ebp]
	mov	ecx, ebx
	rep movsb
; Line 105
	mov	BYTE PTR _lb$[ebp+ebx], 1
	inc	ebx
; Line 106
	push	16					; 00000010H
	pop	ecx
	sub	ecx, ebx
	xor	al, al
	lea	edi, DWORD PTR _lb$[ebp+ebx]
	rep stosb
; Line 107
	lea	eax, DWORD PTR _lb$[ebp]
$LN1@chaskey:
; Line 110
	mov	edi, eax
	lea	eax, DWORD PTR _v$[ebp]
	xor	esi, esi
	sub	edi, eax
$LL16@chaskey:
	lea	eax, DWORD PTR _v$[ebp+esi]
	mov	cl, BYTE PTR [edi+eax]
	xor	BYTE PTR [eax], cl
	inc	esi
	cmp	esi, 16					; 00000010H
	jl	SHORT $LL16@chaskey
; Line 111
	mov	esi, edx
	lea	eax, DWORD PTR _v$[ebp]
	xor	ecx, ecx
	sub	esi, eax
$LL21@chaskey:
	lea	eax, DWORD PTR _v$[ebp+ecx]
	mov	dl, BYTE PTR [esi+eax]
	xor	BYTE PTR [eax], dl
	inc	ecx
	cmp	ecx, 16					; 00000010H
	jl	SHORT $LL21@chaskey
; Line 112
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	call	_chas_permute
	pop	ecx
; Line 113
	xor	ecx, ecx
$LL26@chaskey:
	lea	eax, DWORD PTR _v$[ebp+ecx]
	mov	dl, BYTE PTR [esi+eax]
	xor	BYTE PTR [eax], dl
	inc	ecx
	cmp	ecx, 16					; 00000010H
	jl	SHORT $LL26@chaskey
; Line 115
	mov	edi, DWORD PTR _tag$[ebp]
	mov	ecx, DWORD PTR _taglen$[ebp]
	lea	esi, DWORD PTR _v$[ebp]
	rep movsb
	pop	edi
	pop	esi
	pop	ebx
; Line 117
	leave
	ret	0
_chaskey ENDP
_TEXT	ENDS
END
