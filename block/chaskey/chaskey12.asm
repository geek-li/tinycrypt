; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\odzhan\tinycrypt\block\chaskey\chaskey12.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_C
CONST	SEGMENT
_C	DD	00H
	DD	087H
CONST	ENDS
PUBLIC	_subkeys
; Function compile flags: /Ogspy
;	COMDAT _subkeys
_TEXT	SEGMENT
_k1$ = 8						; size = 4
_k2$ = 12						; size = 4
_k$ = 16						; size = 4
_subkeys PROC						; COMDAT
; File c:\odzhan\tinycrypt\block\chaskey\chaskey12.c
; Line 66
	mov	ecx, DWORD PTR _k$[esp-4]
	mov	eax, DWORD PTR [ecx+12]
	shr	eax, 31					; 0000001fH
	mov	edx, DWORD PTR _C[eax*4]
	mov	eax, DWORD PTR [ecx]
	push	esi
	add	eax, eax
	xor	edx, eax
	mov	eax, DWORD PTR _k1$[esp]
	mov	DWORD PTR [eax], edx
	mov	edx, DWORD PTR [ecx]
	mov	esi, DWORD PTR [ecx+4]
	shr	edx, 31					; 0000001fH
	add	esi, esi
	or	edx, esi
	mov	DWORD PTR [eax+4], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	esi, DWORD PTR [ecx+4]
	add	edx, edx
	shr	esi, 31					; 0000001fH
	or	edx, esi
	mov	DWORD PTR [eax+8], edx
	mov	edx, DWORD PTR [ecx+8]
	mov	ecx, DWORD PTR [ecx+12]
	shr	edx, 31					; 0000001fH
	add	ecx, ecx
	or	edx, ecx
	mov	DWORD PTR [eax+12], edx
; Line 67
	shr	edx, 31					; 0000001fH
	mov	edx, DWORD PTR _C[edx*4]
	mov	ecx, DWORD PTR [eax]
	add	ecx, ecx
	xor	edx, ecx
	mov	ecx, DWORD PTR _k2$[esp]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	esi, DWORD PTR [eax]
	add	edx, edx
	shr	esi, 31					; 0000001fH
	or	edx, esi
	mov	DWORD PTR [ecx+4], edx
	mov	edx, DWORD PTR [eax+4]
	mov	esi, DWORD PTR [eax+8]
	shr	edx, 31					; 0000001fH
	add	esi, esi
	or	edx, esi
	mov	DWORD PTR [ecx+8], edx
	mov	edx, DWORD PTR [eax+12]
	mov	eax, DWORD PTR [eax+8]
	add	edx, edx
	shr	eax, 31					; 0000001fH
	or	edx, eax
	mov	DWORD PTR [ecx+12], edx
	pop	esi
; Line 68
	ret	0
_subkeys ENDP
_TEXT	ENDS
PUBLIC	_chaskey
EXTRN	_memset:PROC
EXTRN	_memcpy:PROC
; Function compile flags: /Ogspy
;	COMDAT _chaskey
_TEXT	SEGMENT
_lb$ = -40						; size = 16
_v$ = -24						; size = 16
_end$ = -8						; size = 4
_M$ = -4						; size = 4
_tag$ = 8						; size = 4
_taglen$ = 12						; size = 4
tv2163 = 16						; size = 4
_i$ = 16						; size = 4
_m$ = 16						; size = 4
tv2159 = 20						; size = 4
tv1269 = 20						; size = 4
_mlen$ = 20						; size = 4
_l$ = 24						; size = 4
_k$ = 24						; size = 4
_k1$ = 28						; size = 4
_k2$ = 32						; size = 4
_chaskey PROC						; COMDAT
; Line 70
	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
; Line 73
	mov	eax, DWORD PTR _mlen$[ebp]
	mov	edx, DWORD PTR _m$[ebp]
; Line 85
	mov	ecx, DWORD PTR _k$[ebp]
	dec	eax
	shr	eax, 2
	and	eax, 1073741820				; 3ffffffcH
; Line 90
	cmp	DWORD PTR _mlen$[ebp], 0
	push	ebx
	mov	ebx, DWORD PTR [ecx]
	lea	eax, DWORD PTR [edx+eax*4]
	push	esi
	mov	esi, DWORD PTR [ecx+4]
	mov	DWORD PTR _end$[ebp], eax
	mov	eax, DWORD PTR [ecx+8]
	push	edi
	mov	edi, DWORD PTR [ecx+12]
	mov	DWORD PTR _M$[ebp], edx
	mov	DWORD PTR _v$[ebp+8], eax
	je	$LN44@chaskey
; Line 91
	cmp	edx, DWORD PTR _end$[ebp]
	je	$LN81@chaskey
$LL83@chaskey:
; Line 100
	xor	esi, DWORD PTR [edx+4]
	xor	ebx, DWORD PTR [edx]
; Line 101
	xor	eax, DWORD PTR [edx+8]
; Line 102
	xor	edi, DWORD PTR [edx+12]
; Line 103
	add	ebx, esi
	add	eax, edi
	rol	esi, 5
	xor	esi, ebx
	rol	ebx, 16					; 00000010H
	rol	edi, 8
	xor	edi, eax
	add	ebx, edi
	add	eax, esi
	rol	edi, 13					; 0000000dH
	xor	edi, ebx
	rol	esi, 7
	xor	esi, eax
	add	ebx, esi
	rol	eax, 16					; 00000010H
	add	eax, edi
	rol	esi, 5
	xor	esi, ebx
	rol	ebx, 16					; 00000010H
	rol	edi, 8
	xor	edi, eax
	add	ebx, edi
	add	eax, esi
	rol	edi, 13					; 0000000dH
	xor	edi, ebx
	rol	esi, 7
	xor	esi, eax
	add	ebx, esi
	rol	eax, 16					; 00000010H
	add	eax, edi
	rol	esi, 5
	xor	esi, ebx
	rol	ebx, 16					; 00000010H
	rol	edi, 8
	xor	edi, eax
	add	ebx, edi
	add	eax, esi
	rol	edi, 13					; 0000000dH
	xor	edi, ebx
	rol	esi, 7
	xor	esi, eax
	add	ebx, esi
	rol	eax, 16					; 00000010H
	rol	esi, 5
	xor	esi, ebx
	add	eax, edi
	rol	ebx, 16					; 00000010H
	rol	edi, 8
	xor	edi, eax
	add	ebx, edi
	add	eax, esi
	rol	edi, 13					; 0000000dH
	xor	edi, ebx
	rol	esi, 7
	xor	esi, eax
	add	ebx, esi
	rol	eax, 16					; 00000010H
	rol	esi, 5
	xor	esi, ebx
	add	eax, edi
	rol	ebx, 16					; 00000010H
	rol	edi, 8
	xor	edi, eax
	add	ebx, edi
	rol	edi, 13					; 0000000dH
	add	eax, esi
	xor	edi, ebx
	rol	esi, 7
	xor	esi, eax
	rol	eax, 16					; 00000010H
	add	ebx, esi
	rol	esi, 5
	xor	esi, ebx
	rol	ebx, 16					; 00000010H
	add	eax, edi
	rol	edi, 8
	xor	edi, eax
	add	ebx, edi
	add	eax, esi
	rol	edi, 13					; 0000000dH
	xor	edi, ebx
	rol	esi, 7
	xor	esi, eax
	add	ebx, esi
	rol	eax, 16					; 00000010H
	add	eax, edi
	rol	esi, 5
	xor	esi, ebx
	rol	ebx, 16					; 00000010H
	rol	edi, 8
	xor	edi, eax
	add	ebx, edi
	add	eax, esi
	rol	edi, 13					; 0000000dH
	xor	edi, ebx
	rol	esi, 7
	xor	esi, eax
	add	ebx, esi
	rol	eax, 16					; 00000010H
	add	eax, edi
	rol	esi, 5
	xor	esi, ebx
	rol	ebx, 16					; 00000010H
	rol	edi, 8
	xor	edi, eax
	add	ebx, edi
	add	eax, esi
	rol	edi, 13					; 0000000dH
	xor	edi, ebx
	rol	esi, 7
	xor	esi, eax
	add	ebx, esi
	rol	eax, 16					; 00000010H
	rol	esi, 5
	xor	esi, ebx
	add	eax, edi
	rol	ebx, 16					; 00000010H
	rol	edi, 8
	xor	edi, eax
	add	ebx, edi
	add	eax, esi
	rol	edi, 13					; 0000000dH
	xor	edi, ebx
	rol	esi, 7
	xor	esi, eax
	add	ebx, esi
	rol	eax, 16					; 00000010H
	rol	esi, 5
	xor	esi, ebx
	add	eax, edi
	rol	ebx, 16					; 00000010H
	rol	edi, 8
	xor	edi, eax
	add	ebx, edi
	add	eax, esi
	rol	edi, 13					; 0000000dH
	xor	edi, ebx
	rol	esi, 7
	xor	esi, eax
	add	ebx, esi
	rol	eax, 16					; 00000010H
	rol	esi, 5
	xor	esi, ebx
	add	eax, edi
	rol	ebx, 16					; 00000010H
	rol	edi, 8
	xor	edi, eax
	add	ebx, edi
	rol	edi, 13					; 0000000dH
	add	eax, esi
	xor	edi, ebx
	rol	esi, 7
	xor	esi, eax
	add	ebx, esi
	rol	eax, 16					; 00000010H
	rol	esi, 5
	xor	esi, ebx
	rol	ebx, 16					; 00000010H
	add	eax, edi
	rol	edi, 8
	xor	edi, eax
	add	ebx, edi
	rol	edi, 13					; 0000000dH
	add	eax, esi
	xor	edi, ebx
	rol	esi, 7
	xor	esi, eax
	add	edx, 16					; 00000010H
	rol	eax, 16					; 00000010H
	cmp	edx, DWORD PTR _end$[ebp]
	jne	$LL83@chaskey
	mov	DWORD PTR _M$[ebp], edx
	mov	DWORD PTR _v$[ebp+8], eax
$LN81@chaskey:
; Line 107
	test	BYTE PTR _mlen$[ebp], 15		; 0000000fH
	jne	SHORT $LN94@chaskey
; Line 108
	mov	ecx, DWORD PTR _k1$[ebp]
; Line 110
	jmp	SHORT $LN43@chaskey
$LN94@chaskey:
	mov	edx, DWORD PTR _m$[ebp]
$LN44@chaskey:
; Line 111
	mov	ecx, DWORD PTR _k2$[ebp]
; Line 113
	and	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _l$[ebp], ecx
; Line 114
	mov	ecx, DWORD PTR _mlen$[ebp]
	add	ecx, edx
	cmp	DWORD PTR _M$[ebp], ecx
	je	SHORT $LN95@chaskey
; Line 111
	sub	ecx, DWORD PTR _M$[ebp]
	lea	eax, DWORD PTR _lb$[ebp]
	push	ecx
	push	DWORD PTR _M$[ebp]
	mov	DWORD PTR tv1269[ebp], ecx
	push	eax
	call	_memcpy
; Line 114
	mov	ecx, DWORD PTR tv1269[ebp]
	mov	eax, DWORD PTR _v$[ebp+8]
	add	esp, 12					; 0000000cH
	jmp	SHORT $LN42@chaskey
$LN95@chaskey:
	mov	ecx, DWORD PTR _i$[ebp]
$LN42@chaskey:
; Line 117
	mov	BYTE PTR _lb$[ebp+ecx], 1
	inc	ecx
; Line 118
	cmp	ecx, 16					; 00000010H
	je	SHORT $LN37@chaskey
; Line 117
	push	16					; 00000010H
	pop	edx
	sub	edx, ecx
	push	edx
	lea	eax, DWORD PTR _lb$[ebp+ecx]
	push	0
	push	eax
	call	_memset
	mov	eax, DWORD PTR _v$[ebp+8]
	add	esp, 12					; 0000000cH
$LN37@chaskey:
; Line 121
	mov	ecx, DWORD PTR _l$[ebp]
	lea	edx, DWORD PTR _lb$[ebp]
$LN43@chaskey:
; Line 131
	xor	ebx, DWORD PTR [edx]
; Line 134
	xor	edi, DWORD PTR [edx+12]
	xor	esi, DWORD PTR [edx+4]
	xor	eax, DWORD PTR [edx+8]
; Line 136
	mov	edx, DWORD PTR [ecx]
	xor	ebx, edx
	mov	DWORD PTR tv2159[ebp], edx
; Line 137
	mov	edx, DWORD PTR [ecx+4]
	xor	esi, edx
; Line 141
	add	ebx, esi
	mov	DWORD PTR tv2163[ebp], edx
	mov	edx, DWORD PTR [ecx+8]
	xor	eax, edx
	mov	ecx, DWORD PTR [ecx+12]
	xor	edi, ecx
	add	eax, edi
	rol	esi, 5
	xor	esi, ebx
	rol	ebx, 16					; 00000010H
	rol	edi, 8
	xor	edi, eax
	add	ebx, edi
	add	eax, esi
	rol	edi, 13					; 0000000dH
	xor	edi, ebx
	rol	esi, 7
	xor	esi, eax
	add	ebx, esi
	rol	eax, 16					; 00000010H
	add	eax, edi
	rol	esi, 5
	xor	esi, ebx
	rol	ebx, 16					; 00000010H
	rol	edi, 8
	xor	edi, eax
	add	ebx, edi
	add	eax, esi
	rol	edi, 13					; 0000000dH
	xor	edi, ebx
	rol	esi, 7
	xor	esi, eax
	add	ebx, esi
	rol	eax, 16					; 00000010H
	add	eax, edi
	rol	esi, 5
	xor	esi, ebx
	rol	ebx, 16					; 00000010H
	rol	edi, 8
	xor	edi, eax
	add	ebx, edi
	rol	edi, 13					; 0000000dH
	xor	edi, ebx
	add	eax, esi
	rol	esi, 7
	xor	esi, eax
	add	ebx, esi
	rol	eax, 16					; 00000010H
	rol	esi, 5
	xor	esi, ebx
	add	eax, edi
	rol	ebx, 16					; 00000010H
	rol	edi, 8
	xor	edi, eax
	add	ebx, edi
	rol	edi, 13					; 0000000dH
	xor	edi, ebx
	add	eax, esi
	rol	esi, 7
	xor	esi, eax
	add	ebx, esi
	rol	eax, 16					; 00000010H
	rol	esi, 5
	xor	esi, ebx
	add	eax, edi
	rol	ebx, 16					; 00000010H
	rol	edi, 8
	xor	edi, eax
	add	ebx, edi
	rol	edi, 13					; 0000000dH
	xor	edi, ebx
	add	eax, esi
	rol	esi, 7
	xor	esi, eax
	add	ebx, esi
	rol	eax, 16					; 00000010H
	add	eax, edi
	rol	esi, 5
	xor	esi, ebx
	rol	ebx, 16					; 00000010H
	rol	edi, 8
	xor	edi, eax
	add	ebx, edi
	add	eax, esi
	rol	edi, 13					; 0000000dH
	xor	edi, ebx
	rol	esi, 7
	xor	esi, eax
	add	ebx, esi
	rol	eax, 16					; 00000010H
	add	eax, edi
	rol	esi, 5
	xor	esi, ebx
	rol	ebx, 16					; 00000010H
	rol	edi, 8
	xor	edi, eax
	add	ebx, edi
	add	eax, esi
	rol	edi, 13					; 0000000dH
	xor	edi, ebx
	rol	esi, 7
	xor	esi, eax
	add	ebx, esi
	rol	eax, 16					; 00000010H
	add	eax, edi
	rol	esi, 5
	xor	esi, ebx
	rol	ebx, 16					; 00000010H
	rol	edi, 8
	xor	edi, eax
	add	ebx, edi
	add	eax, esi
	rol	edi, 13					; 0000000dH
	xor	edi, ebx
	rol	esi, 7
	xor	esi, eax
	add	ebx, esi
	rol	eax, 16					; 00000010H
	rol	esi, 5
	xor	esi, ebx
	add	eax, edi
	rol	ebx, 16					; 00000010H
	rol	edi, 8
	xor	edi, eax
	add	ebx, edi
	add	eax, esi
	rol	edi, 13					; 0000000dH
	xor	edi, ebx
	rol	esi, 7
	xor	esi, eax
	add	ebx, esi
	rol	eax, 16					; 00000010H
	rol	esi, 5
	xor	esi, ebx
	add	eax, edi
	rol	ebx, 16					; 00000010H
	rol	edi, 8
	xor	edi, eax
	add	ebx, edi
	rol	edi, 13					; 0000000dH
	xor	edi, ebx
	add	eax, esi
	rol	esi, 7
	xor	esi, eax
	rol	eax, 16					; 00000010H
	add	ebx, esi
	rol	esi, 5
	xor	esi, ebx
	add	eax, edi
	rol	ebx, 16					; 00000010H
	rol	edi, 8
	xor	edi, eax
	add	ebx, edi
	add	eax, esi
	rol	edi, 13					; 0000000dH
	xor	edi, ebx
	rol	esi, 7
	xor	esi, eax
; Line 155
	push	DWORD PTR _taglen$[ebp]
	rol	eax, 16					; 00000010H
	add	ebx, esi
	rol	esi, 5
	xor	esi, ebx
	add	eax, edi
	rol	ebx, 16					; 00000010H
	rol	edi, 8
	xor	edi, eax
	add	ebx, edi
	add	eax, esi
	rol	edi, 13					; 0000000dH
	xor	edi, ebx
	xor	ebx, DWORD PTR tv2159[ebp]
	rol	esi, 7
	xor	esi, eax
	xor	esi, DWORD PTR tv2163[ebp]
	rol	eax, 16					; 00000010H
	xor	eax, edx
	mov	DWORD PTR _v$[ebp+8], eax
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	push	DWORD PTR _tag$[ebp]
	xor	edi, ecx
	mov	DWORD PTR _v$[ebp], ebx
	mov	DWORD PTR _v$[ebp+4], esi
	mov	DWORD PTR _v$[ebp+12], edi
	call	_memcpy
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi
	pop	ebx
; Line 157
	leave
	ret	0
_chaskey ENDP
_TEXT	ENDS
END
