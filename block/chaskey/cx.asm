; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\odzhan\tinycrypt\block\chaskey\cx.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_C
CONST	SEGMENT
_C	DD	00H
	DD	087H
CONST	ENDS
PUBLIC	_chas_permute
EXTRN	_ROTL32:PROC
; Function compile flags: /Ogspy
;	COMDAT _chas_permute
_TEXT	SEGMENT
_v$ = 8							; size = 4
_chas_permute PROC					; COMDAT
; File c:\odzhan\tinycrypt\block\chaskey\cx.c
; Line 27
	push	esi
; Line 29
	mov	esi, DWORD PTR _v$[esp]
	push	edi
	push	12					; 0000000cH
	pop	edi
$LL3@chas_permu:
; Line 31
	mov	eax, DWORD PTR [esi+4]
	add	DWORD PTR [esi], eax
; Line 32
	push	5
	push	eax
	call	_ROTL32
; Line 33
	mov	ecx, DWORD PTR [esi]
	mov	edx, ecx
	xor	edx, eax
; Line 34
	push	16					; 00000010H
	push	ecx
	mov	DWORD PTR [esi+4], edx
	call	_ROTL32
	mov	DWORD PTR [esi], eax
; Line 35
	mov	eax, DWORD PTR [esi+12]
	add	DWORD PTR [esi+8], eax
; Line 36
	push	8
	push	eax
	call	_ROTL32
; Line 37
	mov	ecx, DWORD PTR [esi+8]
	xor	ecx, eax
; Line 38
	add	DWORD PTR [esi], ecx
; Line 39
	push	13					; 0000000dH
	push	ecx
	mov	DWORD PTR [esi+12], ecx
	call	_ROTL32
; Line 40
	mov	ecx, DWORD PTR [esi]
	xor	ecx, eax
; Line 41
	mov	eax, DWORD PTR [esi+4]
	add	DWORD PTR [esi+8], eax
; Line 42
	push	7
	push	eax
	mov	DWORD PTR [esi+12], ecx
	call	_ROTL32
; Line 43
	mov	ecx, DWORD PTR [esi+8]
	mov	edx, ecx
	xor	edx, eax
; Line 44
	push	16					; 00000010H
	push	ecx
	mov	DWORD PTR [esi+4], edx
	call	_ROTL32
	add	esp, 48					; 00000030H
	dec	edi
	mov	DWORD PTR [esi+8], eax
	jne	SHORT $LL3@chas_permu
; Line 46
	pop	edi
	pop	esi
	ret	0
_chas_permute ENDP
_TEXT	ENDS
PUBLIC	_TIMESTWO
; Function compile flags: /Ogspy
;	COMDAT _TIMESTWO
_TEXT	SEGMENT
_out$ = 8						; size = 4
_in$ = 12						; size = 4
_TIMESTWO PROC						; COMDAT
; Line 52
	mov	eax, DWORD PTR _in$[esp-4]
	mov	ecx, DWORD PTR [eax+12]
	shr	ecx, 31					; 0000001fH
	mov	edx, DWORD PTR _C[ecx*4]
	mov	ecx, DWORD PTR [eax]
	add	ecx, ecx
	xor	edx, ecx
	mov	ecx, DWORD PTR _out$[esp-4]
	mov	DWORD PTR [ecx], edx
; Line 53
	mov	edx, DWORD PTR [eax]
	push	esi
	mov	esi, DWORD PTR [eax+4]
	shr	edx, 31					; 0000001fH
	add	esi, esi
	or	edx, esi
	mov	DWORD PTR [ecx+4], edx
; Line 54
	mov	edx, DWORD PTR [eax+8]
	mov	esi, DWORD PTR [eax+4]
	add	edx, edx
	shr	esi, 31					; 0000001fH
	or	edx, esi
	mov	DWORD PTR [ecx+8], edx
; Line 55
	mov	edx, DWORD PTR [eax+8]
	mov	eax, DWORD PTR [eax+12]
	shr	edx, 31					; 0000001fH
	add	eax, eax
	or	edx, eax
	mov	DWORD PTR [ecx+12], edx
	pop	esi
; Line 56
	ret	0
_TIMESTWO ENDP
_TEXT	ENDS
PUBLIC	_chas_setkey
; Function compile flags: /Ogspy
;	COMDAT _chas_setkey
_TEXT	SEGMENT
_out$ = 8						; size = 4
_in$ = 12						; size = 4
_chas_setkey PROC					; COMDAT
; Line 59
	push	ebx
; Line 62
	mov	ebx, DWORD PTR _out$[esp]
	push	esi
	mov	esi, DWORD PTR _in$[esp+4]
	push	edi
	push	16					; 00000010H
	pop	ecx
	mov	edi, ebx
	rep movsb
; Line 64
	lea	esi, DWORD PTR [ebx+16]
	push	ebx
	push	esi
	call	_TIMESTWO
; Line 65
	push	esi
	add	ebx, 32					; 00000020H
	push	ebx
	call	_TIMESTWO
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
	pop	ebx
; Line 66
	ret	0
_chas_setkey ENDP
_TEXT	ENDS
PUBLIC	_chas_xor
; Function compile flags: /Ogspy
;	COMDAT _chas_xor
_TEXT	SEGMENT
_out$ = 8						; size = 4
_in$ = 12						; size = 4
_len$ = 16						; size = 4
_chas_xor PROC						; COMDAT
; Line 68
	push	esi
; Line 71
	mov	esi, DWORD PTR _len$[esp]
	test	esi, esi
	jle	SHORT $LN1@chas_xor
	mov	eax, DWORD PTR _out$[esp]
	mov	ecx, DWORD PTR _in$[esp]
	sub	ecx, eax
$LL3@chas_xor:
; Line 72
	mov	dl, BYTE PTR [ecx+eax]
	xor	BYTE PTR [eax], dl
	inc	eax
	dec	esi
	jne	SHORT $LL3@chas_xor
$LN1@chas_xor:
	pop	esi
; Line 74
	ret	0
_chas_xor ENDP
_TEXT	ENDS
PUBLIC	_chas_mac
; Function compile flags: /Ogspy
;	COMDAT _chas_mac
_TEXT	SEGMENT
_lb$ = -32						; size = 16
_v$ = -16						; size = 16
_tag$ = 8						; size = 4
_taglen$ = 12						; size = 4
_msg$ = 16						; size = 4
_msglen$ = 20						; size = 4
_key$ = 24						; size = 4
_chas_mac PROC						; COMDAT
; Line 82
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	ebx
	push	esi
; Line 90
	mov	esi, DWORD PTR _key$[ebp]
	push	edi
	push	16					; 00000010H
	lea	edi, DWORD PTR _v$[ebp]
	pop	ecx
	rep movsb
$LL4@chas_mac:
; Line 95
	mov	ebx, DWORD PTR _msglen$[ebp]
	cmp	ebx, 16					; 00000010H
	jb	SHORT $LN8@chas_mac
	push	16					; 00000010H
	pop	ebx
$LN8@chas_mac:
; Line 98
	mov	esi, DWORD PTR _msg$[ebp]
	lea	edi, DWORD PTR _lb$[ebp]
	mov	ecx, ebx
	rep movsb
; Line 101
	cmp	ebx, 16					; 00000010H
	jge	SHORT $LN2@chas_mac
; Line 102
	mov	BYTE PTR _lb$[ebp+ebx], 1
	inc	ebx
$LN2@chas_mac:
; Line 106
	push	ebx
	lea	eax, DWORD PTR _lb$[ebp]
	push	eax
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	call	_chas_xor
	add	esp, 12					; 0000000cH
; Line 109
	push	16					; 00000010H
	pop	esi
	cmp	DWORD PTR _msglen$[ebp], esi
	jbe	SHORT $LN11@chas_mac
; Line 115
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	call	_chas_permute
; Line 118
	add	DWORD PTR _msg$[ebp], ebx
; Line 119
	sub	DWORD PTR _msglen$[ebp], ebx
	pop	ecx
; Line 120
	jmp	SHORT $LL4@chas_mac
$LN11@chas_mac:
; Line 110
	xor	eax, eax
	cmp	DWORD PTR _msglen$[ebp], esi
; Line 123
	push	esi
	setne	al
	dec	eax
	and	eax, -16				; fffffff0H
	add	eax, 32					; 00000020H
	add	DWORD PTR _key$[ebp], eax
	push	DWORD PTR _key$[ebp]
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	call	_chas_xor
; Line 125
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	call	_chas_permute
; Line 127
	push	esi
	push	DWORD PTR _key$[ebp]
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	call	_chas_xor
; Line 130
	mov	edi, DWORD PTR _tag$[ebp]
	mov	ecx, DWORD PTR _taglen$[ebp]
	add	esp, 28					; 0000001cH
	lea	esi, DWORD PTR _v$[ebp]
	rep movsb
	pop	edi
	pop	esi
	pop	ebx
; Line 131
	leave
	ret	0
_chas_mac ENDP
_TEXT	ENDS
END
