; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\odzhan\tinycrypt\block\twofish\twofish.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_whiten
; Function compile flags: /Ogspy
;	COMDAT _whiten
_TEXT	SEGMENT
_in$ = 8						; size = 4
_keys$ = 12						; size = 4
_whiten	PROC						; COMDAT
; File c:\odzhan\tinycrypt\block\twofish\twofish.c
; Line 42
	mov	eax, DWORD PTR _in$[esp-4]
	mov	ecx, DWORD PTR _keys$[esp-4]
	push	4
	pop	edx
	sub	ecx, eax
	push	esi
$LL3@whiten:
; Line 43
	mov	esi, DWORD PTR [ecx+eax]
	xor	DWORD PTR [eax], esi
	add	eax, 4
	dec	edx
	jne	SHORT $LL3@whiten
	pop	esi
; Line 45
	ret	0
_whiten	ENDP
_TEXT	ENDS
PUBLIC	_mds
; Function compile flags: /Ogspy
;	COMDAT _mds
_TEXT	SEGMENT
_matrix$ = -32						; size = 16
_x$ = -16						; size = 8
_acc$ = -8						; size = 8
_w$ = 8							; size = 4
_mds	PROC						; COMDAT
; Line 48
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
; Line 63
	mov	eax, DWORD PTR _w$[ebp]
	push	ebx
	push	esi
; Line 64
	xor	ebx, ebx
	push	edi
	mov	DWORD PTR _matrix$[ebp], 1532751617	; 5b5bef01H
	mov	DWORD PTR _matrix$[ebp+4], 32501595	; 01efef5bH
	mov	DWORD PTR _matrix$[ebp+8], -285123601	; ef015befH
	mov	DWORD PTR _matrix$[ebp+12], 1542390255	; 5bef01efH
	mov	DWORD PTR _x$[ebp], eax
	mov	DWORD PTR _acc$[ebp], ebx
	lea	esi, DWORD PTR _matrix$[ebp]
$LL19@mds:
; Line 68
	xor	ecx, ecx
$LL20@mds:
; Line 71
	movzx	edx, BYTE PTR _x$[ebp+ecx]
	movzx	eax, BYTE PTR [esi+ecx]
; Line 72
	test	edx, edx
	je	SHORT $LN6@mds
$LL4@mds:
; Line 74
	mov	edi, eax
	xor	edi, 361				; 00000169H
	cmp	eax, edi
	jbe	SHORT $LN2@mds
; Line 75
	mov	eax, edi
$LN2@mds:
; Line 76
	test	dl, 1
	je	SHORT $LN1@mds
; Line 77
	xor	BYTE PTR _acc$[ebp+ebx], al
$LN1@mds:
; Line 78
	add	eax, eax
; Line 79
	shr	edx, 1
	jne	SHORT $LL4@mds
$LN6@mds:
; Line 68
	inc	ecx
	cmp	ecx, 4
	jb	SHORT $LL20@mds
; Line 66
	inc	ebx
	add	esi, 4
	cmp	ebx, 4
	jl	SHORT $LL19@mds
; Line 83
	mov	eax, DWORD PTR _acc$[ebp]
	pop	edi
	pop	esi
	pop	ebx
; Line 84
	leave
	ret	0
_mds	ENDP
_TEXT	ENDS
PUBLIC	_round_g
; Function compile flags: /Ogspy
;	COMDAT _round_g
_TEXT	SEGMENT
_x$ = -8						; size = 8
_ctx$ = 8						; size = 4
_w$ = 12						; size = 4
_round_g PROC						; COMDAT
; Line 88
	push	ebp
	mov	ebp, esp
	push	ecx
	push	ecx
; Line 95
	mov	ecx, DWORD PTR _ctx$[ebp]
	mov	eax, DWORD PTR _w$[ebp]
	push	esi
	add	ecx, 672				; 000002a0H
	mov	DWORD PTR _x$[ebp], eax
; Line 97
	xor	esi, esi
$LL3@round_g:
; Line 98
	lea	eax, DWORD PTR _x$[ebp+esi]
	movzx	edx, BYTE PTR [eax]
	mov	dl, BYTE PTR [edx+ecx]
; Line 99
	add	ecx, 256				; 00000100H
	inc	esi
	mov	BYTE PTR [eax], dl
	cmp	esi, 4
	jb	SHORT $LL3@round_g
; Line 101
	push	DWORD PTR _x$[ebp]
	call	_mds
	pop	ecx
	pop	esi
; Line 102
	leave
	ret	0
_round_g ENDP
_TEXT	ENDS
PUBLIC	_Mod
; Function compile flags: /Ogspy
;	COMDAT _Mod
_TEXT	SEGMENT
_c$ = 8							; size = 4
_Mod	PROC						; COMDAT
; Line 107
	push	esi
; Line 110
	mov	esi, DWORD PTR _c$[esp]
	mov	eax, esi
	and	al, 128					; 00000080H
	movzx	edx, al
	neg	edx
	sbb	edx, edx
	lea	eax, DWORD PTR [esi+esi]
	and	edx, 333				; 0000014dH
	xor	edx, eax
; Line 111
	mov	eax, esi
	and	al, 1
	movzx	ecx, al
	neg	ecx
	sbb	ecx, ecx
	mov	eax, esi
	shr	eax, 1
	and	ecx, 166				; 000000a6H
	xor	ecx, eax
	xor	ecx, edx
; Line 113
	mov	eax, ecx
	shl	eax, 8
	or	eax, edx
	shl	eax, 8
	or	eax, ecx
	shl	eax, 8
	or	eax, esi
	pop	esi
; Line 114
	ret	0
_Mod	ENDP
_TEXT	ENDS
PUBLIC	_reedsolomon
; Function compile flags: /Ogspy
;	COMDAT _reedsolomon
_TEXT	SEGMENT
_x$ = 8							; size = 8
_reedsolomon PROC					; COMDAT
; Line 122
	mov	ecx, DWORD PTR _x$[esp-4]
	push	ebx
	mov	ebx, ecx
	mov	eax, 65280				; 0000ff00H
	and	ebx, eax
	mov	edx, ecx
	shl	edx, 16					; 00000010H
	push	esi
	mov	esi, DWORD PTR _x$[esp+8]
	or	ebx, edx
	push	edi
	mov	edx, ecx
	mov	edi, esi
	shrd	edx, edi, 8
	and	edx, eax
	mov	eax, esi
	shrd	ecx, eax, 24
	shl	ebx, 8
	shr	edi, 8
	or	ebx, edx
	and	ecx, 255				; 000000ffH
	push	8
	shr	eax, 24					; 00000018H
	or	ebx, ecx
	pop	edi
$LL3@reedsolomo:
; Line 127
	mov	eax, esi
	shr	eax, 24					; 00000018H
	push	eax
	call	_Mod
	pop	ecx
	movzx	ecx, bl
	xor	eax, ecx
	shl	esi, 8
	xor	esi, eax
; Line 128
	shr	ebx, 8
	dec	edi
	jne	SHORT $LL3@reedsolomo
; Line 130
	pop	edi
	mov	eax, esi
	pop	esi
	pop	ebx
; Line 131
	ret	0
_reedsolomon ENDP
_TEXT	ENDS
PUBLIC	_gq
; Function compile flags: /Ogspy
;	COMDAT _gq
_TEXT	SEGMENT
_i$ = -1						; size = 1
_x$ = 8							; size = 1
_p$ = 12						; size = 4
_gq	PROC						; COMDAT
; Line 134
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 138
	mov	edx, DWORD PTR _p$[ebp]
	mov	al, BYTE PTR _x$[ebp]
	push	ebx
	push	esi
	mov	BYTE PTR _i$[ebp], 0
	push	edi
$LL4@gq:
	movzx	ecx, al
; Line 141
	shl	al, 3
	mov	esi, ecx
	mov	edi, ecx
	shr	ecx, 1
	shr	esi, 4
	and	edi, 15					; 0000000fH
	xor	edi, esi
; Line 143
	mov	bl, BYTE PTR [edi+edx]
; Line 144
	xor	eax, ecx
	and	eax, 15					; 0000000fH
	xor	eax, esi
; Line 147
	cmp	BYTE PTR _i$[ebp], 0
	mov	al, BYTE PTR [eax+edx+16]
	jne	SHORT $LN1@gq
; Line 148
	mov	cl, bl
	mov	bl, al
	mov	al, cl
$LN1@gq:
; Line 150
	shl	al, 4
; Line 151
	or	al, bl
; Line 152
	add	edx, 32					; 00000020H
	inc	BYTE PTR _i$[ebp]
	cmp	BYTE PTR _i$[ebp], 2
	jl	SHORT $LL4@gq
	pop	edi
	pop	esi
	pop	ebx
; Line 155
	leave
	ret	0
_gq	ENDP
_TEXT	ENDS
PUBLIC	_tf_init
; Function compile flags: /Ogspy
;	COMDAT _tf_init
_TEXT	SEGMENT
_t$ = -324						; size = 256
tv285 = -68						; size = 4
_qb$ = -64						; size = 64
_ctx$ = 8						; size = 4
_tf_init PROC						; COMDAT
; Line 161
	push	ebp
	mov	ebp, esp
	sub	esp, 324				; 00000144H
	push	ebx
	push	esi
	push	edi
; Line 168
	mov	DWORD PTR _qb$[ebp], 603379480		; 23f6d718H
	mov	DWORD PTR _qb$[ebp+4], 1255052720	; 4ace95b0H
; Line 169
	mov	DWORD PTR _qb$[ebp+8], 1394707406	; 53218bceH
	mov	DWORD PTR _qb$[ebp+12], -653825457	; d9076a4fH
; Line 170
	mov	DWORD PTR _qb$[ebp+16], 165078443	; 09d6e5abH
	mov	DWORD PTR _qb$[ebp+20], 390217612	; 17423f8cH
; Line 171
	mov	DWORD PTR _qb$[ebp+24], -434024579	; e6214f7dH
	mov	DWORD PTR _qb$[ebp+28], -1403518023	; ac5803b9H
; Line 172
	mov	DWORD PTR _qb$[ebp+32], -427828350	; e67fdb82H
	mov	DWORD PTR _qb$[ebp+36], 1554008339	; 5ca04913H
; Line 173
	mov	DWORD PTR _qb$[ebp+40], 1942270689	; 73c4b2e1H
	mov	DWORD PTR _qb$[ebp+44], -2137040170	; 809f5ad6H
; Line 174
	mov	DWORD PTR _qb$[ebp+48], -1453238332	; a96157c4H
	mov	DWORD PTR _qb$[ebp+52], -206402080	; f3b28de0H
; Line 175
	mov	DWORD PTR _qb$[ebp+56], -314829413	; ed3c159bH
	mov	DWORD PTR _qb$[ebp+60], -1476200634	; a802f746H
; Line 177
	lea	eax, DWORD PTR _t$[ebp]
; Line 179
	xor	esi, esi
$LL9@tf_init:
; Line 180
	mov	cl, BYTE PTR _qb$[ebp+esi]
; Line 181
	mov	dl, cl
	and	dl, 15					; 0000000fH
; Line 182
	shr	cl, 4
	mov	BYTE PTR [eax], dl
	mov	BYTE PTR [eax+1], cl
	add	eax, 2
	inc	esi
	cmp	esi, 64					; 00000040H
	jl	SHORT $LL9@tf_init
; Line 185
	xor	edi, edi
$LL6@tf_init:
; Line 187
	mov	eax, DWORD PTR _ctx$[ebp]
	lea	ebx, DWORD PTR _t$[ebp]
	lea	esi, DWORD PTR [eax+edi+160]
	mov	DWORD PTR tv285[ebp], 2
$LL3@tf_init:
; Line 192
	push	ebx
	push	edi
	call	_gq
	mov	BYTE PTR [esi], al
	pop	ecx
; Line 193
	add	ebx, 64					; 00000040H
; Line 194
	add	esi, 256				; 00000100H
	dec	DWORD PTR tv285[ebp]
	pop	ecx
	jne	SHORT $LL3@tf_init
; Line 185
	inc	edi
	cmp	edi, 256				; 00000100H
	jl	SHORT $LL6@tf_init
	pop	edi
	pop	esi
	pop	ebx
; Line 197
	leave
	ret	0
_tf_init ENDP
_TEXT	ENDS
PUBLIC	_round_h
; Function compile flags: /Ogspy
;	COMDAT _round_h
_TEXT	SEGMENT
_x$ = -12						; size = 8
_qbp$ = -4						; size = 4
_i$ = 8							; size = 4
_ctx$ = 8						; size = 4
_x_in$ = 12						; size = 4
_L$ = 16						; size = 4
_round_h PROC						; COMDAT
; Line 201
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
; Line 205
	mov	eax, DWORD PTR _ctx$[ebp]
	add	eax, 160				; 000000a0H
	mov	DWORD PTR _qbp$[ebp], eax
; Line 207
	mov	eax, DWORD PTR _x_in$[ebp]
	imul	eax, 16843009				; 01010101H
	push	ebx
	push	esi
	mov	esi, DWORD PTR _L$[ebp]
	push	edi
	mov	edi, -1672241152			; 9c53a000H
	mov	DWORD PTR _x$[ebp], eax
; Line 209
	mov	DWORD PTR _i$[ebp], 4
	add	esi, 24					; 00000018H
$LL7@round_h:
; Line 211
	xor	ecx, ecx
$LL4@round_h:
; Line 213
	rol	edi, 1
; Line 214
	mov	edx, edi
	and	edx, 1
	lea	eax, DWORD PTR _x$[ebp+ecx]
	movzx	ebx, BYTE PTR [eax]
	shl	edx, 8
	add	edx, DWORD PTR _qbp$[ebp]
	inc	ecx
	mov	dl, BYTE PTR [ebx+edx]
	mov	BYTE PTR [eax], dl
	cmp	ecx, 4
	jl	SHORT $LL4@round_h
; Line 216
	cmp	DWORD PTR _i$[ebp], 0
	jle	SHORT $LN6@round_h
; Line 217
	mov	eax, DWORD PTR [esi]
	xor	DWORD PTR _x$[ebp], eax
$LN6@round_h:
; Line 209
	dec	DWORD PTR _i$[ebp]
	sub	esi, 8
	cmp	DWORD PTR _i$[ebp], 0
	jge	SHORT $LL7@round_h
; Line 220
	mov	eax, DWORD PTR _x$[ebp]
	pop	edi
	pop	esi
	pop	ebx
; Line 221
	leave
	ret	0
_round_h ENDP
_TEXT	ENDS
PUBLIC	_tf_setkey
; Function compile flags: /Ogspy
;	COMDAT _tf_setkey
_TEXT	SEGMENT
_key_copy$ = -36					; size = 32
_B$ = -4						; size = 4
_ctx$ = 8						; size = 4
_key$ = 12						; size = 4
_tf_setkey PROC						; COMDAT
; Line 224
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	ebx
	push	esi
	push	edi
; Line 232
	push	DWORD PTR _ctx$[ebp]
	xor	ebx, ebx
	mov	DWORD PTR _B$[ebp], ebx
	call	_tf_init
; Line 235
	mov	esi, DWORD PTR _key$[ebp]
	pop	ecx
	push	8
	pop	ecx
	lea	edi, DWORD PTR _key_copy$[ebp]
	rep movsd
$LL12@tf_setkey:
; Line 239
	lea	edi, DWORD PTR _key_copy$[ebp]
$calc_mds$1429:
; Line 241
	push	edi
	push	ebx
	push	DWORD PTR _ctx$[ebp]
	call	_round_h
; Line 243
	mov	esi, DWORD PTR _B$[ebp]
	push	eax
	inc	ebx
	add	edi, 4
	call	_mds
	add	esp, 16					; 00000010H
	mov	DWORD PTR _B$[ebp], eax
; Line 244
	test	bl, 1
	jne	SHORT $calc_mds$1429
; Line 246
	rol	DWORD PTR _B$[ebp], 8
; Line 248
	add	esi, DWORD PTR _B$[ebp]
; Line 251
	mov	eax, DWORD PTR _ctx$[ebp]
	add	DWORD PTR _B$[ebp], esi
; Line 252
	mov	ecx, DWORD PTR _B$[ebp]
	rol	ecx, 9
	mov	DWORD PTR [eax+ebx*4-8], esi
	mov	DWORD PTR [eax+ebx*4-4], ecx
	cmp	ebx, 40					; 00000028H
	jb	SHORT $LL12@tf_setkey
; Line 255
	add	edi, 16					; 00000010H
; Line 257
	xor	esi, esi
$LL9@tf_setkey:
; Line 258
	mov	eax, DWORD PTR _key$[ebp]
	push	DWORD PTR [eax+esi*8+4]
	push	DWORD PTR [eax+esi*8]
	call	_reedsolomon
	mov	DWORD PTR [edi], eax
; Line 259
	sub	edi, 8
	inc	esi
	pop	ecx
	pop	ecx
	cmp	esi, 4
	jb	SHORT $LL9@tf_setkey
; Line 262
	add	edi, 8
; Line 264
	xor	esi, esi
$LL6@tf_setkey:
; Line 265
	mov	ebx, DWORD PTR _ctx$[ebp]
	push	edi
	push	esi
	push	ebx
	call	_round_h
	add	esp, 12					; 0000000cH
	lea	ecx, DWORD PTR [ebx+esi+672]
$LL3@tf_setkey:
; Line 268
	mov	BYTE PTR [ecx], al
; Line 270
	shr	eax, 8
	add	ecx, 256				; 00000100H
; Line 271
	test	eax, eax
	jne	SHORT $LL3@tf_setkey
; Line 264
	inc	esi
	cmp	esi, 256				; 00000100H
	jb	SHORT $LL6@tf_setkey
	pop	edi
	pop	esi
	pop	ebx
; Line 273
	leave
	ret	0
_tf_setkey ENDP
_TEXT	ENDS
PUBLIC	_tf_enc
; Function compile flags: /Ogspy
;	COMDAT _tf_enc
_TEXT	SEGMENT
_T1$ = -16						; size = 4
_i$ = -12						; size = 4
_B$ = -8						; size = 4
_A$ = -4						; size = 4
_ctx$ = 8						; size = 4
_D$ = 12						; size = 4
_data$ = 12						; size = 4
_C$ = 16						; size = 4
_enc$ = 16						; size = 4
_tf_enc	PROC						; COMDAT
; Line 278
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
	push	ebx
; Line 283
	mov	ebx, DWORD PTR _ctx$[ebp]
	push	esi
	mov	esi, DWORD PTR _data$[ebp]
	push	edi
	mov	edi, DWORD PTR _enc$[ebp]
	mov	eax, edi
	shl	eax, 4
	add	eax, ebx
	push	eax
	push	esi
	call	_whiten
	pop	ecx
; Line 285
	add	ebx, 32					; 00000020H
	pop	ecx
; Line 287
	cmp	edi, 1
	jne	SHORT $LN6@tf_enc
; Line 288
	add	ebx, 124				; 0000007cH
$LN6@tf_enc:
; Line 292
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR _A$[ebp], eax
; Line 293
	mov	eax, DWORD PTR [esi+4]
	mov	DWORD PTR _B$[ebp], eax
; Line 294
	mov	eax, DWORD PTR [esi+8]
	mov	DWORD PTR _C$[ebp], eax
; Line 295
	mov	eax, DWORD PTR [esi+12]
	mov	DWORD PTR _D$[ebp], eax
; Line 297
	mov	DWORD PTR _i$[ebp], 16			; 00000010H
$LL11@tf_enc:
; Line 301
	mov	eax, DWORD PTR _B$[ebp]
	rol	eax, 8
	push	eax
	push	DWORD PTR _ctx$[ebp]
	call	_round_g
	push	DWORD PTR _A$[ebp]
	mov	DWORD PTR _T1$[ebp], eax
	push	DWORD PTR _ctx$[ebp]
	call	_round_g
; Line 304
	mov	ecx, DWORD PTR _T1$[ebp]
; Line 310
	mov	edx, DWORD PTR [ebx]
	add	eax, ecx
	add	esp, 16					; 00000010H
	add	ecx, eax
	test	edi, edi
	jne	SHORT $LN2@tf_enc
	add	edx, eax
	xor	DWORD PTR _C$[ebp], edx
; Line 312
	mov	eax, DWORD PTR _D$[ebp]
; Line 313
	mov	edx, DWORD PTR [ebx+4]
	ror	DWORD PTR _C$[ebp], 1
	rol	eax, 1
	add	edx, ecx
	xor	eax, edx
	mov	DWORD PTR _D$[ebp], eax
	add	ebx, 8
; Line 314
	jmp	SHORT $LN1@tf_enc
$LN2@tf_enc:
; Line 315
	add	edx, ecx
	xor	DWORD PTR _D$[ebp], edx
; Line 317
	mov	ecx, DWORD PTR _C$[ebp]
; Line 318
	mov	edx, DWORD PTR [ebx-4]
	ror	DWORD PTR _D$[ebp], 1
	rol	ecx, 1
	add	edx, eax
	xor	ecx, edx
	mov	DWORD PTR _C$[ebp], ecx
	sub	ebx, 8
$LN1@tf_enc:
; Line 322
	mov	edx, DWORD PTR _A$[ebp]
	mov	eax, DWORD PTR _C$[ebp]
	mov	ecx, DWORD PTR _D$[ebp]
	dec	DWORD PTR _i$[ebp]
	cmp	DWORD PTR _i$[ebp], 0
	mov	DWORD PTR _C$[ebp], edx
	mov	edx, DWORD PTR _B$[ebp]
	mov	DWORD PTR _D$[ebp], edx
; Line 323
	mov	DWORD PTR _A$[ebp], eax
	mov	DWORD PTR _B$[ebp], ecx
	jg	$LL11@tf_enc
; Line 327
	mov	edx, DWORD PTR _C$[ebp]
; Line 332
	dec	edi
	neg	edi
	mov	DWORD PTR [esi+8], eax
	mov	eax, DWORD PTR _ctx$[ebp]
	sbb	edi, edi
	and	edi, 4
	lea	eax, DWORD PTR [eax+edi*4]
	mov	DWORD PTR [esi], edx
	mov	edx, DWORD PTR _D$[ebp]
	push	eax
	push	esi
	mov	DWORD PTR [esi+4], edx
	mov	DWORD PTR [esi+12], ecx
	call	_whiten
	pop	ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
; Line 333
	leave
	ret	0
_tf_enc	ENDP
_TEXT	ENDS
END
