; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\odzhan\tinycrypt\hash\jh\jh.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_roundconstant_zero
PUBLIC	_SboxMDS_A
PUBLIC	_SboxMDS_B
_DATA	SEGMENT
_SboxMDS_A DB	0b1H
	DB	00H
	DB	078H
	DB	015H
	DB	0c9H
	DB	09bH
	DB	0f6H
	DB	06dH
	DB	052H
	DB	047H
	DB	0a4H
	DB	0dcH
	DB	08eH
	DB	02aH
	DB	0e3H
	DB	03fH
	DB	0f6H
	DB	09bH
	DB	0dcH
	DB	0c9H
	DB	02aH
	DB	08eH
	DB	052H
	DB	0b1H
	DB	06dH
	DB	0a4H
	DB	00H
	DB	078H
	DB	015H
	DB	047H
	DB	03fH
	DB	0e3H
_SboxMDS_B DB	019H
	DB	00H
	DB	084H
	DB	05bH
	DB	09dH
	DB	0bcH
	DB	063H
	DB	0dfH
	DB	021H
	DB	07aH
	DB	042H
	DB	0c6H
	DB	0e7H
	DB	0a5H
	DB	038H
	DB	0feH
	DB	063H
	DB	0bcH
	DB	0c6H
	DB	09dH
	DB	0a5H
	DB	0e7H
	DB	021H
	DB	019H
	DB	0dfH
	DB	042H
	DB	00H
	DB	084H
	DB	05bH
	DB	07aH
	DB	0feH
	DB	038H
_DATA	ENDS
CONST	SEGMENT
_roundconstant_zero DB 06aH
	DB	09H
	DB	0e6H
	DB	067H
	DB	0f3H
	DB	0bcH
	DB	0c9H
	DB	08H
	DB	0b2H
	DB	0fbH
	DB	013H
	DB	066H
	DB	0eaH
	DB	095H
	DB	07dH
	DB	03eH
	DB	03aH
	DB	0deH
	DB	0c1H
	DB	075H
	DB	012H
	DB	077H
	DB	050H
	DB	099H
	DB	0daH
	DB	02fH
	DB	059H
	DB	0bH
	DB	06H
	DB	067H
	DB	032H
	DB	02aH
CONST	ENDS
PUBLIC	_R8
; Function compile flags: /Ogspy
;	COMDAT _R8
_TEXT	SEGMENT
_tem$ = -24						; size = 128
tv557 = 104						; size = 4
tv353 = 108						; size = 4
tv138 = 108						; size = 4
_i$ = 115						; size = 1
_state$ = 124						; size = 4
_R8	PROC						; COMDAT
; File c:\odzhan\tinycrypt\hash\jh\jh.c
; Line 81
	push	ebp
	lea	ebp, DWORD PTR [esp-116]
	sub	esp, 140				; 0000008cH
; Line 89
	and	DWORD PTR tv353[ebp], 0
	push	ebx
	push	esi
	mov	esi, DWORD PTR _state$[ebp]
	push	edi
	mov	BYTE PTR _i$[ebp], 0
$LL13@R8:
; Line 90
	mov	al, BYTE PTR _i$[ebp]
; Line 92
	mov	ecx, DWORD PTR tv353[ebp]
; Line 93
	movzx	edx, BYTE PTR [esi+ecx+12]
	and	al, 3
	add	al, al
	mov	bl, 7
	sub	bl, al
	mov	eax, ecx
	shr	eax, 2
	movzx	eax, BYTE PTR [eax+esi+140]
	movzx	ecx, bl
	dec	cl
	mov	edi, eax
	shr	edi, cl
	mov	ecx, edx
	and	ecx, 15					; 0000000fH
	mov	DWORD PTR tv557[ebp], ecx
	mov	cl, bl
	shr	eax, cl
	mov	ecx, DWORD PTR tv557[ebp]
	and	edi, 1
	add	edi, edi
	mov	cl, BYTE PTR _SboxMDS_B[ecx+edi*8]
	and	eax, 1
	add	eax, eax
	shr	edx, 4
	xor	cl, BYTE PTR _SboxMDS_A[edx+eax*8]
	mov	eax, DWORD PTR tv353[ebp]
	inc	BYTE PTR _i$[ebp]
	inc	DWORD PTR tv353[ebp]
	cmp	BYTE PTR _i$[ebp], 128			; 00000080H
	mov	BYTE PTR _tem$[ebp+eax], cl
	jb	SHORT $LL13@R8
; Line 97
	xor	edi, edi
	mov	DWORD PTR tv138[ebp], 64		; 00000040H
$LL3@R8:
; Line 98
	mov	dl, BYTE PTR _tem$[ebp+edi+1]
	mov	cl, BYTE PTR _tem$[ebp+edi]
	mov	bl, dl
	xor	bl, cl
	and	bl, 15					; 0000000fH
	xor	bl, cl
	mov	eax, edi
	shr	eax, 1
	mov	BYTE PTR [eax+esi+12], bl
; Line 99
	mov	bl, dl
	xor	bl, cl
	and	bl, 15					; 0000000fH
	xor	bl, dl
	add	edi, 2
	dec	DWORD PTR tv138[ebp]
	mov	BYTE PTR [eax+esi+76], bl
	jne	SHORT $LL3@R8
	pop	edi
	pop	esi
	pop	ebx
; Line 101
	add	ebp, 116				; 00000074H
	leave
	ret	0
_R8	ENDP
_TEXT	ENDS
PUBLIC	_update_roundconstant
; Function compile flags: /Ogspy
;	COMDAT _update_roundconstant
_TEXT	SEGMENT
_tem$ = -36						; size = 32
tv162 = -4						; size = 4
_state$ = 8						; size = 4
_update_roundconstant PROC				; COMDAT
; Line 107
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	ebx
	push	esi
	push	edi
; Line 112
	mov	edi, DWORD PTR _state$[ebp]
	push	32					; 00000020H
	lea	esi, DWORD PTR _tem$[ebp]
	lea	ecx, DWORD PTR [edi+140]
	pop	edx
$LL6@update_rou:
; Line 113
	movzx	eax, BYTE PTR [ecx]
	mov	ebx, eax
	shr	ebx, 4
	mov	bl, BYTE PTR _SboxMDS_A[ebx]
	and	eax, 15					; 0000000fH
	xor	bl, BYTE PTR _SboxMDS_B[eax]
	inc	ecx
	mov	BYTE PTR [esi], bl
	inc	esi
	dec	edx
	jne	SHORT $LL6@update_rou
; Line 116
	xor	esi, esi
	mov	DWORD PTR tv162[ebp], 16		; 00000010H
$LL3@update_rou:
; Line 117
	mov	dl, BYTE PTR _tem$[ebp+esi+1]
	mov	cl, BYTE PTR _tem$[ebp+esi]
	mov	bl, dl
	xor	bl, cl
	and	bl, 15					; 0000000fH
	xor	bl, cl
	mov	eax, esi
	shr	eax, 1
	mov	BYTE PTR [eax+edi+140], bl
; Line 118
	mov	bl, dl
	xor	bl, cl
	and	bl, 15					; 0000000fH
	xor	bl, dl
	add	esi, 2
	dec	DWORD PTR tv162[ebp]
	mov	BYTE PTR [eax+edi+156], bl
	jne	SHORT $LL3@update_rou
	pop	edi
	pop	esi
	pop	ebx
; Line 120
	leave
	ret	0
_update_roundconstant ENDP
_TEXT	ENDS
PUBLIC	_E8_initialgroup
; Function compile flags: /Ogspy
;	COMDAT _E8_initialgroup
_TEXT	SEGMENT
_tem$ = -132						; size = 128
_i$ = -1						; size = 1
_state$ = 8						; size = 4
_E8_initialgroup PROC					; COMDAT
; Line 127
	push	ebp
	mov	ebp, esp
	sub	esp, 132				; 00000084H
	push	esi
	push	edi
; Line 141
	mov	BYTE PTR _i$[ebp], 0
	lea	edi, DWORD PTR _tem$[ebp]
$LL8@E8_initial:
; Line 142
	mov	al, BYTE PTR _i$[ebp]
	mov	dl, al
; Line 143
	shr	al, 3
; Line 145
	movzx	esi, al
	add	esi, DWORD PTR _state$[ebp]
	mov	cl, 7
	mov	al, BYTE PTR [esi+44]
	and	dl, cl
	sub	cl, dl
	mov	dl, BYTE PTR [esi+12]
	shr	dl, cl
	shr	al, cl
; Line 152
	add	dl, dl
	and	al, 1
	or	al, dl
	mov	dl, BYTE PTR [esi+76]
	shr	dl, cl
	add	al, al
	and	dl, 1
	or	al, dl
	mov	dl, BYTE PTR [esi+108]
	shr	dl, cl
	add	al, al
	and	dl, 1
	or	al, dl
	mov	dl, BYTE PTR [esi+28]
	shr	dl, cl
	add	al, al
	and	dl, 1
	or	al, dl
	mov	dl, BYTE PTR [esi+60]
	shr	dl, cl
	add	al, al
	and	dl, 1
	or	al, dl
	mov	dl, BYTE PTR [esi+92]
	shr	dl, cl
	add	al, al
	and	dl, 1
	or	al, dl
	mov	dl, BYTE PTR [esi+124]
	shr	dl, cl
	add	al, al
	mov	ecx, 128				; 00000080H
	and	dl, 1
	or	al, dl
	inc	BYTE PTR _i$[ebp]
	mov	BYTE PTR [edi], al
	inc	edi
	cmp	BYTE PTR _i$[ebp], cl
	jb	SHORT $LL8@E8_initial
; Line 155
	mov	edi, DWORD PTR _state$[ebp]
	add	edi, 12					; 0000000cH
	lea	esi, DWORD PTR _tem$[ebp]
	rep movsb
	pop	edi
	pop	esi
; Line 156
	leave
	ret	0
_E8_initialgroup ENDP
_TEXT	ENDS
PUBLIC	_E8_finaldegroup
; Function compile flags: /Ogspy
;	COMDAT _E8_finaldegroup
_TEXT	SEGMENT
_tem$ = -48						; size = 128
tv496 = 80						; size = 4
tv883 = 84						; size = 4
tv887 = 88						; size = 4
tv907 = 92						; size = 4
tv891 = 96						; size = 4
tv903 = 100						; size = 4
tv899 = 104						; size = 4
tv895 = 108						; size = 4
_i$ = 115						; size = 1
tv911 = 124						; size = 4
_state$ = 124						; size = 4
_E8_finaldegroup PROC					; COMDAT
; Line 163
	push	ebp
	lea	ebp, DWORD PTR [esp-116]
	sub	esp, 164				; 000000a4H
	push	ebx
	push	esi
; Line 168
	xor	al, al
	push	edi
	lea	edi, DWORD PTR _tem$[ebp]
	mov	ecx, 128				; 00000080H
	rep stosb
	mov	ecx, DWORD PTR _state$[ebp]
; Line 170
	mov	BYTE PTR _i$[ebp], al
	mov	DWORD PTR tv883[ebp], 244		; 000000f4H
	sub	DWORD PTR tv883[ebp], ecx
	mov	DWORD PTR tv887[ebp], 500		; 000001f4H
	sub	DWORD PTR tv887[ebp], ecx
	mov	DWORD PTR tv891[ebp], 756		; 000002f4H
	sub	DWORD PTR tv891[ebp], ecx
	mov	DWORD PTR tv895[ebp], 116		; 00000074H
	sub	DWORD PTR tv895[ebp], ecx
	mov	DWORD PTR tv899[ebp], 372		; 00000174H
	sub	DWORD PTR tv899[ebp], ecx
	mov	DWORD PTR tv903[ebp], 628		; 00000274H
	sub	DWORD PTR tv903[ebp], ecx
	mov	DWORD PTR tv907[ebp], 884		; 00000374H
	sub	DWORD PTR tv907[ebp], ecx
	lea	eax, DWORD PTR [ecx+12]
	mov	DWORD PTR tv911[ebp], -12		; fffffff4H
	sub	DWORD PTR tv911[ebp], ecx
	mov	DWORD PTR tv496[ebp], eax
$LL8@E8_finalde:
; Line 180
	mov	dl, BYTE PTR _i$[ebp]
; Line 181
	mov	edi, DWORD PTR tv911[ebp]
	lea	edi, DWORD PTR [edi+eax]
	shr	edi, 3
	lea	edi, DWORD PTR _tem$[ebp+edi]
	mov	cl, 7
	and	dl, cl
	sub	cl, dl
	mov	dl, BYTE PTR [eax]
	movzx	esi, cl
	mov	ecx, esi
	mov	bl, dl
	shr	bl, 7
	shl	bl, cl
	or	BYTE PTR [edi], bl
; Line 182
	mov	edi, DWORD PTR tv883[ebp]
	lea	edi, DWORD PTR [edi+eax]
	sar	edi, 3
	lea	edi, DWORD PTR _tem$[ebp+edi]
	mov	bl, dl
	shr	bl, 6
	and	bl, 1
	shl	bl, cl
	or	BYTE PTR [edi], bl
; Line 183
	mov	edi, DWORD PTR tv887[ebp]
	lea	edi, DWORD PTR [edi+eax]
	sar	edi, 3
	lea	edi, DWORD PTR _tem$[ebp+edi]
	mov	bl, dl
	shr	bl, 5
	and	bl, 1
	shl	bl, cl
	or	BYTE PTR [edi], bl
; Line 184
	mov	edi, DWORD PTR tv891[ebp]
	lea	edi, DWORD PTR [edi+eax]
	sar	edi, 3
	lea	edi, DWORD PTR _tem$[ebp+edi]
	mov	bl, dl
	shr	bl, 4
	and	bl, 1
	shl	bl, cl
	or	BYTE PTR [edi], bl
; Line 185
	mov	edi, DWORD PTR tv895[ebp]
	lea	edi, DWORD PTR [edi+eax]
	sar	edi, 3
	lea	edi, DWORD PTR _tem$[ebp+edi]
	mov	bl, dl
	shr	bl, 3
	and	bl, 1
	shl	bl, cl
	or	BYTE PTR [edi], bl
; Line 186
	mov	edi, DWORD PTR tv899[ebp]
	lea	edi, DWORD PTR [edi+eax]
	sar	edi, 3
	mov	bl, dl
	shr	bl, 2
	and	bl, 1
	shl	bl, cl
	lea	edi, DWORD PTR _tem$[ebp+edi]
	or	BYTE PTR [edi], bl
; Line 187
	mov	edi, DWORD PTR tv903[ebp]
	mov	bl, dl
	shr	bl, 1
	lea	edi, DWORD PTR [edi+eax]
	sar	edi, 3
	and	bl, 1
	shl	bl, cl
	lea	edi, DWORD PTR _tem$[ebp+edi]
	and	dl, 1
; Line 188
	shl	dl, cl
	or	BYTE PTR [edi], bl
	mov	edi, DWORD PTR tv907[ebp]
	lea	edi, DWORD PTR [edi+eax]
	sar	edi, 3
	lea	edi, DWORD PTR _tem$[ebp+edi]
	or	BYTE PTR [edi], dl
	inc	BYTE PTR _i$[ebp]
	mov	ecx, 128				; 00000080H
	inc	eax
	cmp	BYTE PTR _i$[ebp], cl
	jb	$LL8@E8_finalde
; Line 190
	mov	edi, DWORD PTR tv496[ebp]
	lea	esi, DWORD PTR _tem$[ebp]
	rep movsb
	pop	edi
	pop	esi
	pop	ebx
; Line 191
	add	ebp, 116				; 00000074H
	leave
	ret	0
_E8_finaldegroup ENDP
_TEXT	ENDS
PUBLIC	_E8
; Function compile flags: /Ogspy
;	COMDAT _E8
_TEXT	SEGMENT
_state$ = 8						; size = 4
_E8	PROC						; COMDAT
; Line 195
	push	esi
; Line 200
	mov	esi, DWORD PTR _state$[esp]
	push	edi
	push	esi
	call	_E8_initialgroup
	pop	ecx
	push	42					; 0000002aH
	pop	edi
$LL3@E8:
; Line 204
	push	esi
	call	_R8
; Line 205
	push	esi
	call	_update_roundconstant
	dec	edi
	pop	ecx
	pop	ecx
	jne	SHORT $LL3@E8
; Line 209
	push	esi
	call	_E8_finaldegroup
	pop	ecx
	pop	edi
	pop	esi
; Line 210
	ret	0
_E8	ENDP
_TEXT	ENDS
PUBLIC	_F8
; Function compile flags: /Ogspy
;	COMDAT _F8
_TEXT	SEGMENT
_state$ = 8						; size = 4
_F8	PROC						; COMDAT
; Line 214
	push	ebx
; Line 218
	mov	ebx, DWORD PTR _state$[esp]
	push	esi
	push	edi
	push	32					; 00000020H
	pop	ecx
	lea	edi, DWORD PTR [ebx+140]
	mov	esi, OFFSET _roundconstant_zero
	push	64					; 00000040H
	rep movsb
	lea	eax, DWORD PTR [ebx+12]
	pop	esi
$LL6@F8:
; Line 221
	mov	cl, BYTE PTR [eax+160]
	xor	BYTE PTR [eax], cl
	inc	eax
	dec	esi
	jne	SHORT $LL6@F8
; Line 224
	push	ebx
	call	_E8
	pop	ecx
	push	64					; 00000040H
	pop	ecx
	pop	edi
	pop	esi
	lea	eax, DWORD PTR [ebx+76]
	pop	ebx
$LL3@F8:
; Line 227
	mov	dl, BYTE PTR [eax+96]
	xor	BYTE PTR [eax], dl
	inc	eax
	dec	ecx
	jne	SHORT $LL3@F8
; Line 228
	ret	0
_F8	ENDP
_TEXT	ENDS
PUBLIC	_Init
; Function compile flags: /Ogspy
;	COMDAT _Init
_TEXT	SEGMENT
_state$ = 8						; size = 4
_Init	PROC						; COMDAT
; Line 233
	mov	edx, DWORD PTR _state$[esp-4]
	and	DWORD PTR [edx+4], 0
; Line 234
	and	DWORD PTR [edx+8], 0
	push	esi
	push	edi
; Line 238
	push	64					; 00000040H
	xor	al, al
	mov	DWORD PTR [edx], 256			; 00000100H
	lea	edi, DWORD PTR [edx+172]
	pop	ecx
	rep stosb
; Line 239
	lea	edi, DWORD PTR [edx+12]
	mov	ecx, 128				; 00000080H
	rep stosb
; Line 245
	push	edx
	mov	WORD PTR [edx+12], 1
	call	_F8
	pop	ecx
	pop	edi
; Line 247
	xor	eax, eax
	pop	esi
; Line 248
	ret	0
_Init	ENDP
_TEXT	ENDS
PUBLIC	_Update
; Function compile flags: /Ogspy
;	COMDAT _Update
_TEXT	SEGMENT
tv159 = -4						; size = 4
_index$ = 8						; size = 4
_state$ = 8						; size = 4
_data$ = 12						; size = 4
_databitlen$ = 16					; size = 4
_Update	PROC						; COMDAT
; Line 253
	push	ebp
	mov	ebp, esp
	push	ecx
; Line 256
	mov	eax, DWORD PTR _databitlen$[ebp]
	push	ebx
	mov	ebx, DWORD PTR _state$[ebp]
; Line 263
	mov	ecx, DWORD PTR [ebx+8]
	add	DWORD PTR [ebx+4], eax
	and	DWORD PTR _index$[ebp], 0
	push	esi
	push	edi
	test	ecx, ecx
	je	SHORT $LN15@Update
	lea	edx, DWORD PTR [ecx+eax]
	cmp	edx, 512				; 00000200H
	jae	SHORT $LN15@Update
; Line 265
	mov	esi, DWORD PTR _data$[ebp]
	mov	edx, ecx
	shr	edx, 3
	lea	edi, DWORD PTR [edx+ebx+172]
	test	al, 7
	jne	SHORT $LN9@Update
	push	64					; 00000040H
	jmp	SHORT $LN18@Update
$LN9@Update:
; Line 267
	push	65					; 00000041H
$LN18@Update:
	pop	ecx
	sub	ecx, edx
	rep movsb
; Line 268
	add	DWORD PTR [ebx+8], eax
; Line 269
	and	DWORD PTR _databitlen$[ebp], 0
	mov	eax, DWORD PTR _databitlen$[ebp]
$LN15@Update:
; Line 273
	mov	edx, DWORD PTR [ebx+8]
	test	edx, edx
	je	SHORT $LN7@Update
	lea	ecx, DWORD PTR [edx+eax]
	cmp	ecx, 512				; 00000200H
	jb	SHORT $LN7@Update
; Line 274
	mov	esi, DWORD PTR _data$[ebp]
	push	64					; 00000040H
	shr	edx, 3
	pop	ecx
	sub	ecx, edx
	lea	edi, DWORD PTR [edx+ebx+172]
	rep movsb
; Line 275
	mov	edx, DWORD PTR [ebx+8]
	mov	esi, edx
	push	64					; 00000040H
	pop	ecx
	shr	esi, 3
	sub	ecx, esi
; Line 276
	lea	eax, DWORD PTR [eax+edx-512]
; Line 277
	push	ebx
	mov	DWORD PTR _index$[ebp], ecx
	mov	DWORD PTR _databitlen$[ebp], eax
	call	_F8
; Line 278
	and	DWORD PTR [ebx+8], 0
	mov	eax, DWORD PTR _databitlen$[ebp]
	pop	ecx
$LN7@Update:
; Line 282
	cmp	eax, 512				; 00000200H
	jb	SHORT $LN4@Update
	shr	eax, 9
	mov	DWORD PTR tv159[ebp], eax
$LL17@Update:
	mov	esi, DWORD PTR _index$[ebp]
	add	esi, DWORD PTR _data$[ebp]
; Line 283
	push	64					; 00000040H
	pop	ecx
	lea	edi, DWORD PTR [ebx+172]
; Line 284
	push	ebx
	rep movsb
	call	_F8
	add	DWORD PTR _index$[ebp], 64		; 00000040H
	sub	DWORD PTR _databitlen$[ebp], 512	; 00000200H
	dec	DWORD PTR tv159[ebp]
	pop	ecx
	jne	SHORT $LL17@Update
; Line 282
	mov	eax, DWORD PTR _databitlen$[ebp]
$LN4@Update:
; Line 288
	test	eax, eax
	je	SHORT $LN3@Update
; Line 290
	mov	esi, DWORD PTR _index$[ebp]
	mov	ecx, eax
	shr	ecx, 3
	and	ecx, 63					; 0000003fH
	lea	edi, DWORD PTR [ebx+172]
	test	al, 7
; Line 291
	je	SHORT $LN19@Update
; Line 292
	inc	ecx
$LN19@Update:
	add	esi, DWORD PTR _data$[ebp]
	rep movsb
; Line 293
	mov	DWORD PTR [ebx+8], eax
$LN3@Update:
; Line 296
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 297
	leave
	ret	0
_Update	ENDP
_TEXT	ENDS
PUBLIC	_Final
; Function compile flags: /Ogspy
;	COMDAT _Final
_TEXT	SEGMENT
_state$ = 8						; size = 4
_hashval$ = 12						; size = 4
_Final	PROC						; COMDAT
; Line 301
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
; Line 304
	mov	esi, DWORD PTR _state$[ebp]
	mov	eax, DWORD PTR [esi+4]
	push	edi
; Line 306
	push	64					; 00000040H
	pop	ecx
	test	eax, 511				; 000001ffH
	jne	SHORT $LN16@Final
	xor	al, al
	lea	edi, DWORD PTR [esi+172]
	rep stosb
	push	8
; Line 307
	mov	BYTE PTR [esi+172], 128			; 00000080H
	xor	edi, edi
	lea	eax, DWORD PTR [esi+235]
	pop	edx
$LL15@Final:
; Line 309
	mov	ebx, DWORD PTR [esi+4]
	mov	ecx, edi
	shl	ecx, 3
	shr	ebx, cl
	inc	edi
	mov	BYTE PTR [eax], bl
	dec	eax
	dec	edx
	jne	SHORT $LL15@Final
; Line 312
	jmp	SHORT $LN23@Final
$LN16@Final:
; Line 316
	shr	eax, 3
	and	al, 63					; 0000003fH
	test	BYTE PTR [esi+8], 7
; Line 318
	je	SHORT $LN24@Final
; Line 320
	inc	al
$LN24@Final:
; Line 321
	movzx	eax, al
	sub	ecx, eax
	lea	edi, DWORD PTR [eax+esi+172]
	xor	al, al
	rep stosb
; Line 325
	mov	eax, DWORD PTR [esi+4]
	mov	ecx, eax
	shr	ecx, 3
	and	ecx, 63					; 0000003fH
	lea	edx, DWORD PTR [ecx+esi+172]
	and	eax, 7
	push	7
	pop	ecx
	sub	ecx, eax
	mov	al, 1
	shl	al, cl
; Line 326
	push	esi
	or	BYTE PTR [edx], al
	call	_F8
	pop	ecx
; Line 327
	push	64					; 00000040H
	pop	ecx
	xor	al, al
	lea	edi, DWORD PTR [esi+172]
	rep stosb
	push	8
	xor	edi, edi
	lea	eax, DWORD PTR [esi+235]
	pop	edx
$LL9@Final:
; Line 329
	mov	ebx, DWORD PTR [esi+4]
	mov	ecx, edi
	shl	ecx, 3
	shr	ebx, cl
	inc	edi
	mov	BYTE PTR [eax], bl
	dec	eax
	dec	edx
	jne	SHORT $LL9@Final
$LN23@Final:
; Line 330
	push	esi
	call	_F8
; Line 334
	mov	eax, DWORD PTR [esi]
	sub	eax, 224				; 000000e0H
	pop	ecx
	je	SHORT $LN4@Final
	push	32					; 00000020H
	pop	ecx
	sub	eax, ecx
	je	SHORT $LN3@Final
	add	ecx, 96					; 00000060H
	sub	eax, ecx
	je	SHORT $LN2@Final
	sub	eax, ecx
	jne	SHORT $LN5@Final
; Line 338
	add	esi, 76					; 0000004cH
	push	64					; 00000040H
	jmp	SHORT $LN25@Final
$LN2@Final:
; Line 337
	add	esi, 92					; 0000005cH
	push	48					; 00000030H
	jmp	SHORT $LN25@Final
$LN3@Final:
; Line 336
	add	esi, 108				; 0000006cH
	jmp	SHORT $LN26@Final
$LN4@Final:
; Line 335
	add	esi, 112				; 00000070H
	push	28					; 0000001cH
$LN25@Final:
	pop	ecx
$LN26@Final:
	mov	edi, DWORD PTR _hashval$[ebp]
	rep movsb
$LN5@Final:
; Line 341
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 342
	pop	ebp
	ret	0
_Final	ENDP
_TEXT	ENDS
END
