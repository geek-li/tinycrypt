; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\odzhan\tinycrypt\hash\jh\jh_opt8.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_roundconstant_zero
PUBLIC	_SboxMDS_A
PUBLIC	_SboxMDS_B
_DATA	SEGMENT
_SboxMDS_A DB	0b1H
	DB	00H
	DB	078H
	DB	015H
	DB	0c9H
	DB	09bH
	DB	0f6H
	DB	06dH
	DB	052H
	DB	047H
	DB	0a4H
	DB	0dcH
	DB	08eH
	DB	02aH
	DB	0e3H
	DB	03fH
	DB	0f6H
	DB	09bH
	DB	0dcH
	DB	0c9H
	DB	02aH
	DB	08eH
	DB	052H
	DB	0b1H
	DB	06dH
	DB	0a4H
	DB	00H
	DB	078H
	DB	015H
	DB	047H
	DB	03fH
	DB	0e3H
_SboxMDS_B DB	019H
	DB	00H
	DB	084H
	DB	05bH
	DB	09dH
	DB	0bcH
	DB	063H
	DB	0dfH
	DB	021H
	DB	07aH
	DB	042H
	DB	0c6H
	DB	0e7H
	DB	0a5H
	DB	038H
	DB	0feH
	DB	063H
	DB	0bcH
	DB	0c6H
	DB	09dH
	DB	0a5H
	DB	0e7H
	DB	021H
	DB	019H
	DB	0dfH
	DB	042H
	DB	00H
	DB	084H
	DB	05bH
	DB	07aH
	DB	0feH
	DB	038H
_DATA	ENDS
CONST	SEGMENT
_roundconstant_zero DB 06aH
	DB	09H
	DB	0e6H
	DB	067H
	DB	0f3H
	DB	0bcH
	DB	0c9H
	DB	08H
	DB	0b2H
	DB	0fbH
	DB	013H
	DB	066H
	DB	0eaH
	DB	095H
	DB	07dH
	DB	03eH
	DB	03aH
	DB	0deH
	DB	0c1H
	DB	075H
	DB	012H
	DB	077H
	DB	050H
	DB	099H
	DB	0daH
	DB	02fH
	DB	059H
	DB	0bH
	DB	06H
	DB	067H
	DB	032H
	DB	02aH
CONST	ENDS
PUBLIC	_R8
; Function compile flags: /Ogspy
;	COMDAT _R8
_TEXT	SEGMENT
_tem$ = -24						; size = 128
tv557 = 104						; size = 4
tv353 = 108						; size = 4
tv138 = 108						; size = 4
_i$ = 115						; size = 1
_state$ = 124						; size = 4
_R8	PROC						; COMDAT
; File c:\odzhan\tinycrypt\hash\jh\jh_opt8.c
; Line 77
	push	ebp
	lea	ebp, DWORD PTR [esp-116]
	sub	esp, 140				; 0000008cH
; Line 85
	and	DWORD PTR tv353[ebp], 0
	push	ebx
	push	esi
	mov	esi, DWORD PTR _state$[ebp]
	push	edi
	mov	BYTE PTR _i$[ebp], 0
$LL13@R8:
; Line 86
	mov	al, BYTE PTR _i$[ebp]
; Line 88
	mov	ecx, DWORD PTR tv353[ebp]
; Line 89
	movzx	edx, BYTE PTR [esi+ecx+20]
	and	al, 3
	add	al, al
	mov	bl, 7
	sub	bl, al
	mov	eax, ecx
	shr	eax, 2
	movzx	eax, BYTE PTR [eax+esi+148]
	movzx	ecx, bl
	dec	cl
	mov	edi, eax
	shr	edi, cl
	mov	ecx, edx
	and	ecx, 15					; 0000000fH
	mov	DWORD PTR tv557[ebp], ecx
	mov	cl, bl
	shr	eax, cl
	mov	ecx, DWORD PTR tv557[ebp]
	and	edi, 1
	add	edi, edi
	mov	cl, BYTE PTR _SboxMDS_B[ecx+edi*8]
	and	eax, 1
	add	eax, eax
	shr	edx, 4
	xor	cl, BYTE PTR _SboxMDS_A[edx+eax*8]
	mov	eax, DWORD PTR tv353[ebp]
	inc	BYTE PTR _i$[ebp]
	inc	DWORD PTR tv353[ebp]
	cmp	BYTE PTR _i$[ebp], 128			; 00000080H
	mov	BYTE PTR _tem$[ebp+eax], cl
	jb	SHORT $LL13@R8
; Line 93
	xor	edi, edi
	mov	DWORD PTR tv138[ebp], 64		; 00000040H
$LL3@R8:
; Line 94
	mov	dl, BYTE PTR _tem$[ebp+edi+1]
	mov	cl, BYTE PTR _tem$[ebp+edi]
	mov	bl, dl
	xor	bl, cl
	and	bl, 15					; 0000000fH
	xor	bl, cl
	mov	eax, edi
	shr	eax, 1
	mov	BYTE PTR [eax+esi+20], bl
; Line 95
	mov	bl, dl
	xor	bl, cl
	and	bl, 15					; 0000000fH
	xor	bl, dl
	add	edi, 2
	dec	DWORD PTR tv138[ebp]
	mov	BYTE PTR [eax+esi+84], bl
	jne	SHORT $LL3@R8
	pop	edi
	pop	esi
	pop	ebx
; Line 97
	add	ebp, 116				; 00000074H
	leave
	ret	0
_R8	ENDP
_TEXT	ENDS
PUBLIC	_update_roundconstant
; Function compile flags: /Ogspy
;	COMDAT _update_roundconstant
_TEXT	SEGMENT
_tem$ = -36						; size = 32
tv162 = -4						; size = 4
_state$ = 8						; size = 4
_update_roundconstant PROC				; COMDAT
; Line 103
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
	push	ebx
	push	esi
	push	edi
; Line 108
	mov	edi, DWORD PTR _state$[ebp]
	push	32					; 00000020H
	lea	esi, DWORD PTR _tem$[ebp]
	lea	ecx, DWORD PTR [edi+148]
	pop	edx
$LL6@update_rou:
; Line 109
	movzx	eax, BYTE PTR [ecx]
	mov	ebx, eax
	shr	ebx, 4
	mov	bl, BYTE PTR _SboxMDS_A[ebx]
	and	eax, 15					; 0000000fH
	xor	bl, BYTE PTR _SboxMDS_B[eax]
	inc	ecx
	mov	BYTE PTR [esi], bl
	inc	esi
	dec	edx
	jne	SHORT $LL6@update_rou
; Line 112
	xor	esi, esi
	mov	DWORD PTR tv162[ebp], 16		; 00000010H
$LL3@update_rou:
; Line 113
	mov	dl, BYTE PTR _tem$[ebp+esi+1]
	mov	cl, BYTE PTR _tem$[ebp+esi]
	mov	bl, dl
	xor	bl, cl
	and	bl, 15					; 0000000fH
	xor	bl, cl
	mov	eax, esi
	shr	eax, 1
	mov	BYTE PTR [eax+edi+148], bl
; Line 114
	mov	bl, dl
	xor	bl, cl
	and	bl, 15					; 0000000fH
	xor	bl, dl
	add	esi, 2
	dec	DWORD PTR tv162[ebp]
	mov	BYTE PTR [eax+edi+164], bl
	jne	SHORT $LL3@update_rou
	pop	edi
	pop	esi
	pop	ebx
; Line 116
	leave
	ret	0
_update_roundconstant ENDP
_TEXT	ENDS
PUBLIC	_E8_initialgroup
; Function compile flags: /Ogspy
;	COMDAT _E8_initialgroup
_TEXT	SEGMENT
_tem$ = -132						; size = 128
_i$ = -1						; size = 1
_state$ = 8						; size = 4
_E8_initialgroup PROC					; COMDAT
; Line 123
	push	ebp
	mov	ebp, esp
	sub	esp, 132				; 00000084H
	push	esi
	push	edi
; Line 137
	mov	BYTE PTR _i$[ebp], 0
	lea	edi, DWORD PTR _tem$[ebp]
$LL8@E8_initial:
; Line 138
	mov	al, BYTE PTR _i$[ebp]
	mov	dl, al
; Line 139
	shr	al, 3
; Line 141
	movzx	esi, al
	add	esi, DWORD PTR _state$[ebp]
	mov	cl, 7
	mov	al, BYTE PTR [esi+52]
	and	dl, cl
	sub	cl, dl
	mov	dl, BYTE PTR [esi+20]
	shr	dl, cl
	shr	al, cl
; Line 148
	add	dl, dl
	and	al, 1
	or	al, dl
	mov	dl, BYTE PTR [esi+84]
	shr	dl, cl
	add	al, al
	and	dl, 1
	or	al, dl
	mov	dl, BYTE PTR [esi+116]
	shr	dl, cl
	add	al, al
	and	dl, 1
	or	al, dl
	mov	dl, BYTE PTR [esi+36]
	shr	dl, cl
	add	al, al
	and	dl, 1
	or	al, dl
	mov	dl, BYTE PTR [esi+68]
	shr	dl, cl
	add	al, al
	and	dl, 1
	or	al, dl
	mov	dl, BYTE PTR [esi+100]
	shr	dl, cl
	add	al, al
	and	dl, 1
	or	al, dl
	mov	dl, BYTE PTR [esi+132]
	shr	dl, cl
	add	al, al
	mov	ecx, 128				; 00000080H
	and	dl, 1
	or	al, dl
	inc	BYTE PTR _i$[ebp]
	mov	BYTE PTR [edi], al
	inc	edi
	cmp	BYTE PTR _i$[ebp], cl
	jb	SHORT $LL8@E8_initial
; Line 151
	mov	edi, DWORD PTR _state$[ebp]
	add	edi, 20					; 00000014H
	lea	esi, DWORD PTR _tem$[ebp]
	rep movsb
	pop	edi
	pop	esi
; Line 152
	leave
	ret	0
_E8_initialgroup ENDP
_TEXT	ENDS
PUBLIC	_E8_finaldegroup
; Function compile flags: /Ogspy
;	COMDAT _E8_finaldegroup
_TEXT	SEGMENT
_tem$ = -48						; size = 128
tv496 = 80						; size = 4
tv883 = 84						; size = 4
tv887 = 88						; size = 4
tv907 = 92						; size = 4
tv891 = 96						; size = 4
tv903 = 100						; size = 4
tv899 = 104						; size = 4
tv895 = 108						; size = 4
_i$ = 115						; size = 1
tv911 = 124						; size = 4
_state$ = 124						; size = 4
_E8_finaldegroup PROC					; COMDAT
; Line 159
	push	ebp
	lea	ebp, DWORD PTR [esp-116]
	sub	esp, 164				; 000000a4H
	push	ebx
	push	esi
; Line 164
	xor	al, al
	push	edi
	lea	edi, DWORD PTR _tem$[ebp]
	mov	ecx, 128				; 00000080H
	rep stosb
	mov	ecx, DWORD PTR _state$[ebp]
; Line 166
	mov	BYTE PTR _i$[ebp], al
	mov	DWORD PTR tv883[ebp], 236		; 000000ecH
	sub	DWORD PTR tv883[ebp], ecx
	mov	DWORD PTR tv887[ebp], 492		; 000001ecH
	sub	DWORD PTR tv887[ebp], ecx
	mov	DWORD PTR tv891[ebp], 748		; 000002ecH
	sub	DWORD PTR tv891[ebp], ecx
	mov	DWORD PTR tv895[ebp], 108		; 0000006cH
	sub	DWORD PTR tv895[ebp], ecx
	mov	DWORD PTR tv899[ebp], 364		; 0000016cH
	sub	DWORD PTR tv899[ebp], ecx
	mov	DWORD PTR tv903[ebp], 620		; 0000026cH
	sub	DWORD PTR tv903[ebp], ecx
	mov	DWORD PTR tv907[ebp], 876		; 0000036cH
	sub	DWORD PTR tv907[ebp], ecx
	lea	eax, DWORD PTR [ecx+20]
	mov	DWORD PTR tv911[ebp], -20		; ffffffecH
	sub	DWORD PTR tv911[ebp], ecx
	mov	DWORD PTR tv496[ebp], eax
$LL8@E8_finalde:
; Line 176
	mov	dl, BYTE PTR _i$[ebp]
; Line 177
	mov	edi, DWORD PTR tv911[ebp]
	lea	edi, DWORD PTR [edi+eax]
	shr	edi, 3
	lea	edi, DWORD PTR _tem$[ebp+edi]
	mov	cl, 7
	and	dl, cl
	sub	cl, dl
	mov	dl, BYTE PTR [eax]
	movzx	esi, cl
	mov	ecx, esi
	mov	bl, dl
	shr	bl, 7
	shl	bl, cl
	or	BYTE PTR [edi], bl
; Line 178
	mov	edi, DWORD PTR tv883[ebp]
	lea	edi, DWORD PTR [edi+eax]
	sar	edi, 3
	lea	edi, DWORD PTR _tem$[ebp+edi]
	mov	bl, dl
	shr	bl, 6
	and	bl, 1
	shl	bl, cl
	or	BYTE PTR [edi], bl
; Line 179
	mov	edi, DWORD PTR tv887[ebp]
	lea	edi, DWORD PTR [edi+eax]
	sar	edi, 3
	lea	edi, DWORD PTR _tem$[ebp+edi]
	mov	bl, dl
	shr	bl, 5
	and	bl, 1
	shl	bl, cl
	or	BYTE PTR [edi], bl
; Line 180
	mov	edi, DWORD PTR tv891[ebp]
	lea	edi, DWORD PTR [edi+eax]
	sar	edi, 3
	lea	edi, DWORD PTR _tem$[ebp+edi]
	mov	bl, dl
	shr	bl, 4
	and	bl, 1
	shl	bl, cl
	or	BYTE PTR [edi], bl
; Line 181
	mov	edi, DWORD PTR tv895[ebp]
	lea	edi, DWORD PTR [edi+eax]
	sar	edi, 3
	lea	edi, DWORD PTR _tem$[ebp+edi]
	mov	bl, dl
	shr	bl, 3
	and	bl, 1
	shl	bl, cl
	or	BYTE PTR [edi], bl
; Line 182
	mov	edi, DWORD PTR tv899[ebp]
	lea	edi, DWORD PTR [edi+eax]
	sar	edi, 3
	mov	bl, dl
	shr	bl, 2
	and	bl, 1
	shl	bl, cl
	lea	edi, DWORD PTR _tem$[ebp+edi]
	or	BYTE PTR [edi], bl
; Line 183
	mov	edi, DWORD PTR tv903[ebp]
	mov	bl, dl
	shr	bl, 1
	lea	edi, DWORD PTR [edi+eax]
	sar	edi, 3
	and	bl, 1
	shl	bl, cl
	lea	edi, DWORD PTR _tem$[ebp+edi]
	and	dl, 1
; Line 184
	shl	dl, cl
	or	BYTE PTR [edi], bl
	mov	edi, DWORD PTR tv907[ebp]
	lea	edi, DWORD PTR [edi+eax]
	sar	edi, 3
	lea	edi, DWORD PTR _tem$[ebp+edi]
	or	BYTE PTR [edi], dl
	inc	BYTE PTR _i$[ebp]
	mov	ecx, 128				; 00000080H
	inc	eax
	cmp	BYTE PTR _i$[ebp], cl
	jb	$LL8@E8_finalde
; Line 186
	mov	edi, DWORD PTR tv496[ebp]
	lea	esi, DWORD PTR _tem$[ebp]
	rep movsb
	pop	edi
	pop	esi
	pop	ebx
; Line 187
	add	ebp, 116				; 00000074H
	leave
	ret	0
_E8_finaldegroup ENDP
_TEXT	ENDS
PUBLIC	_E8
; Function compile flags: /Ogspy
;	COMDAT _E8
_TEXT	SEGMENT
_state$ = 8						; size = 4
_E8	PROC						; COMDAT
; Line 191
	push	esi
; Line 196
	mov	esi, DWORD PTR _state$[esp]
	push	edi
	push	esi
	call	_E8_initialgroup
	pop	ecx
	push	42					; 0000002aH
	pop	edi
$LL3@E8:
; Line 200
	push	esi
	call	_R8
; Line 201
	push	esi
	call	_update_roundconstant
	dec	edi
	pop	ecx
	pop	ecx
	jne	SHORT $LL3@E8
; Line 205
	push	esi
	call	_E8_finaldegroup
	pop	ecx
	pop	edi
	pop	esi
; Line 206
	ret	0
_E8	ENDP
_TEXT	ENDS
PUBLIC	_F8
; Function compile flags: /Ogspy
;	COMDAT _F8
_TEXT	SEGMENT
_state$ = 8						; size = 4
_F8	PROC						; COMDAT
; Line 210
	push	ebx
; Line 214
	mov	ebx, DWORD PTR _state$[esp]
	push	esi
	push	edi
	push	32					; 00000020H
	pop	ecx
	lea	edi, DWORD PTR [ebx+148]
	mov	esi, OFFSET _roundconstant_zero
	push	64					; 00000040H
	rep movsb
	lea	eax, DWORD PTR [ebx+20]
	pop	esi
$LL6@F8:
; Line 217
	mov	cl, BYTE PTR [eax+160]
	xor	BYTE PTR [eax], cl
	inc	eax
	dec	esi
	jne	SHORT $LL6@F8
; Line 220
	push	ebx
	call	_E8
	pop	ecx
	push	64					; 00000040H
	pop	ecx
	pop	edi
	pop	esi
	lea	eax, DWORD PTR [ebx+84]
	pop	ebx
$LL3@F8:
; Line 223
	mov	dl, BYTE PTR [eax+96]
	xor	BYTE PTR [eax], dl
	inc	eax
	dec	ecx
	jne	SHORT $LL3@F8
; Line 224
	ret	0
_F8	ENDP
_TEXT	ENDS
PUBLIC	_Init
; Function compile flags: /Ogspy
;	COMDAT _Init
_TEXT	SEGMENT
_state$ = 8						; size = 4
_hashbitlen$ = 12					; size = 4
_Init	PROC						; COMDAT
; Line 229
	mov	edx, DWORD PTR _state$[esp-4]
	push	ebx
; Line 232
	mov	ebx, DWORD PTR _hashbitlen$[esp]
	push	esi
	push	edi
	xor	eax, eax
	mov	DWORD PTR [edx+8], eax
	mov	DWORD PTR [edx+12], eax
	mov	DWORD PTR [edx+16], eax
; Line 234
	push	64					; 00000040H
	mov	DWORD PTR [edx], ebx
	xor	al, al
	lea	edi, DWORD PTR [edx+180]
	pop	ecx
	rep stosb
; Line 235
	lea	edi, DWORD PTR [edx+20]
	mov	ecx, 128				; 00000080H
	rep stosb
; Line 238
	mov	BYTE PTR [edx+21], bl
; Line 239
	sar	ebx, 8
; Line 241
	push	edx
	mov	BYTE PTR [edx+20], bl
	call	_F8
	pop	ecx
	pop	edi
	pop	esi
; Line 243
	xor	eax, eax
	pop	ebx
; Line 244
	ret	0
_Init	ENDP
_TEXT	ENDS
PUBLIC	_Update
; Function compile flags: /Ogspy
;	COMDAT _Update
_TEXT	SEGMENT
tv133 = -16						; size = 8
_index$ = -8						; size = 8
_state$ = 8						; size = 4
_data$ = 12						; size = 4
_databitlen$ = 16					; size = 8
_Update	PROC						; COMDAT
; Line 249
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 252
	mov	edx, DWORD PTR _databitlen$[ebp]
	mov	eax, DWORD PTR _databitlen$[ebp+4]
	push	ebx
	mov	ebx, DWORD PTR _state$[ebp]
	add	DWORD PTR [ebx+8], edx
; Line 259
	mov	ecx, DWORD PTR [ebx+16]
	push	esi
	adc	DWORD PTR [ebx+12], eax
	and	DWORD PTR _index$[ebp], 0
	and	DWORD PTR _index$[ebp+4], 0
	push	edi
	test	ecx, ecx
	je	SHORT $LN21@Update
	xor	esi, esi
	mov	edi, ecx
	add	edi, edx
	adc	esi, eax
	test	esi, esi
	ja	SHORT $LN21@Update
	jb	SHORT $LN20@Update
	cmp	edi, 512				; 00000200H
	jae	SHORT $LN21@Update
$LN20@Update:
; Line 260
	mov	eax, edx
	and	eax, 7
	xor	esi, esi
	or	eax, esi
; Line 261
	mov	esi, DWORD PTR _data$[ebp]
	mov	eax, ecx
	jne	SHORT $LN9@Update
	push	64					; 00000040H
	jmp	SHORT $LN29@Update
$LN9@Update:
; Line 263
	push	65					; 00000041H
$LN29@Update:
; Line 265
	and	DWORD PTR _databitlen$[ebp], 0
	shr	eax, 3
	pop	ecx
	sub	ecx, eax
	lea	edi, DWORD PTR [eax+ebx+180]
	rep movsb
	add	DWORD PTR [ebx+16], edx
	and	DWORD PTR _databitlen$[ebp+4], 0
	mov	edx, DWORD PTR _databitlen$[ebp]
	mov	eax, DWORD PTR _databitlen$[ebp+4]
$LN21@Update:
; Line 269
	mov	esi, DWORD PTR [ebx+16]
	test	esi, esi
	je	SHORT $LN26@Update
	mov	ecx, esi
	xor	edi, edi
	add	ecx, edx
	adc	edi, eax
	mov	DWORD PTR tv133[ebp+4], edi
	jne	SHORT $LN16@Update
	cmp	ecx, 512				; 00000200H
	jb	SHORT $LN26@Update
$LN16@Update:
; Line 271
	and	DWORD PTR _index$[ebp+4], 0
	shr	esi, 3
	push	64					; 00000040H
	pop	ecx
	sub	ecx, esi
	lea	edi, DWORD PTR [esi+ebx+180]
	mov	esi, DWORD PTR _data$[ebp]
	rep movsb
	mov	esi, DWORD PTR [ebx+16]
	push	64					; 00000040H
	mov	edi, esi
	shr	edi, 3
	pop	ecx
	sub	ecx, edi
	mov	DWORD PTR _index$[ebp], ecx
; Line 272
	mov	ecx, 512				; 00000200H
	sub	ecx, esi
	sub	edx, ecx
	sbb	eax, 0
; Line 273
	push	ebx
	mov	DWORD PTR _databitlen$[ebp], edx
	mov	DWORD PTR _databitlen$[ebp+4], eax
	call	_F8
; Line 274
	and	DWORD PTR [ebx+16], 0
	mov	edx, DWORD PTR _databitlen$[ebp]
	mov	eax, DWORD PTR _databitlen$[ebp+4]
	pop	ecx
$LN26@Update:
; Line 278
	test	eax, eax
	jne	SHORT $LL17@Update
	cmp	edx, 512				; 00000200H
	jb	SHORT $LN18@Update
$LL17@Update:
; Line 279
	mov	esi, DWORD PTR _index$[ebp]
	add	esi, DWORD PTR _data$[ebp]
	push	64					; 00000040H
	pop	ecx
	lea	edi, DWORD PTR [ebx+180]
; Line 280
	push	ebx
	rep movsb
	call	_F8
	add	DWORD PTR _index$[ebp], 64		; 00000040H
	pop	ecx
	adc	DWORD PTR _index$[ebp+4], 0
	add	DWORD PTR _databitlen$[ebp], -512	; fffffe00H
	adc	DWORD PTR _databitlen$[ebp+4], -1
	cmp	DWORD PTR _databitlen$[ebp+4], 0
	ja	SHORT $LL17@Update
; Line 278
	jb	SHORT $LN25@Update
	cmp	DWORD PTR _databitlen$[ebp], 512	; 00000200H
	jae	SHORT $LL17@Update
$LN25@Update:
	mov	edx, DWORD PTR _databitlen$[ebp]
	mov	eax, DWORD PTR _databitlen$[ebp+4]
$LN18@Update:
; Line 284
	test	eax, eax
	jne	SHORT $LN19@Update
	test	edx, edx
	je	SHORT $LN3@Update
$LN19@Update:
; Line 285
	mov	ecx, edx
	and	ecx, 7
	xor	esi, esi
	or	ecx, esi
; Line 286
	mov	esi, DWORD PTR _index$[ebp]
	lea	edi, DWORD PTR [ebx+180]
	mov	ecx, edx
	jne	SHORT $LN2@Update
	shrd	ecx, eax, 3
	shr	eax, 3
	and	ecx, 63					; 0000003fH
; Line 287
	jmp	SHORT $LN30@Update
$LN2@Update:
; Line 288
	shrd	ecx, eax, 3
	and	ecx, 63					; 0000003fH
	shr	eax, 3
	inc	ecx
$LN30@Update:
	add	esi, DWORD PTR _data$[ebp]
	rep movsb
; Line 289
	mov	DWORD PTR [ebx+16], edx
$LN3@Update:
; Line 292
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 293
	leave
	ret	0
_Update	ENDP
_TEXT	ENDS
PUBLIC	_Final
EXTRN	_memset:PROC
EXTRN	__aullshr:PROC
; Function compile flags: /Ogspy
;	COMDAT _Final
_TEXT	SEGMENT
tv233 = 8						; size = 4
tv152 = 8						; size = 4
_state$ = 8						; size = 4
_hashval$ = 12						; size = 4
_Final	PROC						; COMDAT
; Line 297
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
; Line 300
	mov	esi, DWORD PTR _state$[ebp]
	mov	edx, DWORD PTR [esi+8]
	mov	eax, DWORD PTR [esi+12]
	mov	ecx, edx
	push	edi
	and	ecx, 511				; 000001ffH
	xor	edi, edi
	xor	ebx, ebx
	or	ecx, edi
	jne	SHORT $LN19@Final
; Line 302
	push	64					; 00000040H
	lea	edi, DWORD PTR [esi+180]
	xor	al, al
	pop	ecx
	rep stosb
; Line 303
	mov	BYTE PTR [esi+180], 128			; 00000080H
	lea	edi, DWORD PTR [esi+243]
	mov	DWORD PTR tv152[ebp], 8
$LL18@Final:
; Line 305
	mov	eax, DWORD PTR [esi+8]
	mov	edx, DWORD PTR [esi+12]
	mov	ecx, ebx
	shl	ecx, 3
	call	__aullshr
	inc	ebx
	mov	BYTE PTR [edi], al
	dec	edi
	dec	DWORD PTR tv152[ebp]
	jne	SHORT $LL18@Final
; Line 308
	jmp	$LN29@Final
$LN19@Final:
; Line 311
	shrd	edx, eax, 3
	shr	eax, 3
	mov	ecx, eax
	mov	al, dl
	and	al, 63					; 0000003fH
	test	BYTE PTR [esi+16], 7
	jne	SHORT $LN14@Final
	cmp	al, 64					; 00000040H
	jae	SHORT $LN28@Final
	mov	dl, 64					; 00000040H
	movzx	ecx, al
	sub	dl, al
	movzx	eax, dl
	push	eax
	lea	ecx, DWORD PTR [ecx+esi+180]
	push	ebx
	push	ecx
	call	_memset
	add	esp, 12					; 0000000cH
; Line 312
	jmp	SHORT $LN28@Final
$LN14@Final:
; Line 314
	inc	al
; Line 315
	movzx	eax, al
	movzx	edi, BYTE PTR [eax+esi+180]
	push	64					; 00000040H
	pop	ecx
	sub	ecx, eax
	xor	al, al
	rep stosb
$LN28@Final:
; Line 319
	mov	eax, DWORD PTR [esi+8]
	mov	ecx, DWORD PTR [esi+12]
	mov	edx, DWORD PTR [esi+8]
	shrd	eax, ecx, 3
	shr	ecx, 3
	push	7
	pop	ecx
	and	edx, ecx
	sub	ecx, edx
	mov	dl, 1
	shl	dl, cl
	and	eax, 63					; 0000003fH
	lea	eax, DWORD PTR [eax+esi+180]
; Line 320
	push	esi
	or	BYTE PTR [eax], dl
	call	_F8
	pop	ecx
; Line 321
	push	64					; 00000040H
	lea	edi, DWORD PTR [esi+180]
	xor	al, al
	pop	ecx
	rep stosb
	lea	edi, DWORD PTR [esi+243]
	mov	DWORD PTR tv233[ebp], 8
$LL9@Final:
; Line 323
	mov	eax, DWORD PTR [esi+8]
	mov	edx, DWORD PTR [esi+12]
	mov	ecx, ebx
	shl	ecx, 3
	call	__aullshr
	inc	ebx
	mov	BYTE PTR [edi], al
	dec	edi
	dec	DWORD PTR tv233[ebp]
	jne	SHORT $LL9@Final
$LN29@Final:
; Line 324
	push	esi
	call	_F8
; Line 328
	mov	eax, DWORD PTR [esi]
	sub	eax, 224				; 000000e0H
	pop	ecx
	je	SHORT $LN4@Final
	push	32					; 00000020H
	pop	ecx
	sub	eax, ecx
	je	SHORT $LN3@Final
	add	ecx, 96					; 00000060H
	sub	eax, ecx
	je	SHORT $LN2@Final
	sub	eax, ecx
	jne	SHORT $LN5@Final
; Line 332
	add	esi, 84					; 00000054H
	push	64					; 00000040H
	jmp	SHORT $LN30@Final
$LN2@Final:
; Line 331
	add	esi, 100				; 00000064H
	push	48					; 00000030H
	jmp	SHORT $LN30@Final
$LN3@Final:
; Line 330
	add	esi, 116				; 00000074H
	jmp	SHORT $LN31@Final
$LN4@Final:
; Line 329
	add	esi, 120				; 00000078H
	push	28					; 0000001cH
$LN30@Final:
	pop	ecx
$LN31@Final:
	mov	edi, DWORD PTR _hashval$[ebp]
	rep movsb
$LN5@Final:
; Line 335
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
; Line 336
	pop	ebp
	ret	0
_Final	ENDP
_TEXT	ENDS
PUBLIC	_Hash
; Function compile flags: /Ogspy
;	COMDAT _Hash
_TEXT	SEGMENT
_state$ = -248						; size = 248
_hashbitlen$ = 8					; size = 4
_data$ = 12						; size = 4
_databitlen$ = 16					; size = 8
_hashval$ = 24						; size = 4
_Hash	PROC						; COMDAT
; Line 340
	push	ebp
	mov	ebp, esp
; Line 343
	mov	eax, DWORD PTR _hashbitlen$[ebp]
	sub	esp, 248				; 000000f8H
	cmp	eax, 224				; 000000e0H
	je	SHORT $LN2@Hash
	cmp	eax, 256				; 00000100H
	je	SHORT $LN2@Hash
	cmp	eax, 384				; 00000180H
	je	SHORT $LN2@Hash
	cmp	eax, 512				; 00000200H
	je	SHORT $LN2@Hash
; Line 350
	push	2
	pop	eax
; Line 351
	leave
	ret	0
$LN2@Hash:
; Line 344
	push	eax
	lea	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_Init
; Line 345
	push	DWORD PTR _databitlen$[ebp+4]
	lea	eax, DWORD PTR _state$[ebp]
	push	DWORD PTR _databitlen$[ebp]
	push	DWORD PTR _data$[ebp]
	push	eax
	call	_Update
; Line 346
	push	DWORD PTR _hashval$[ebp]
	lea	eax, DWORD PTR _state$[ebp]
	push	eax
	call	_Final
	add	esp, 32					; 00000020H
; Line 347
	xor	eax, eax
; Line 351
	leave
	ret	0
_Hash	ENDP
_TEXT	ENDS
END
