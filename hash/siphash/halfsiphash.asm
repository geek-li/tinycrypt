; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\odzhan\tinycrypt\hash\siphash\halfsiphash.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_SIPROUND
; Function compile flags: /Ogspy
;	COMDAT _SIPROUND
_TEXT	SEGMENT
_v$ = 8							; size = 4
_SIPROUND PROC						; COMDAT
; File c:\odzhan\tinycrypt\hash\siphash\halfsiphash.c
; Line 45
	mov	eax, DWORD PTR _v$[esp-4]
	mov	ecx, DWORD PTR [eax+4]
	add	DWORD PTR [eax], ecx
; Line 47
	mov	edx, DWORD PTR [eax]
	rol	ecx, 5
	xor	ecx, edx
	mov	DWORD PTR [eax+4], ecx
; Line 49
	mov	ecx, DWORD PTR [eax+12]
	add	DWORD PTR [eax+8], ecx
; Line 50
	rol	ecx, 8
	push	esi
; Line 51
	mov	esi, DWORD PTR [eax+8]
	xor	ecx, esi
	rol	edx, 16					; 00000010H
; Line 52
	add	edx, ecx
; Line 53
	rol	ecx, 7
; Line 54
	xor	ecx, edx
	mov	DWORD PTR [eax+12], ecx
; Line 55
	mov	ecx, DWORD PTR [eax+4]
	add	esi, ecx
	mov	DWORD PTR [eax], edx
; Line 57
	mov	edx, esi
	rol	ecx, 13					; 0000000dH
	xor	ecx, edx
; Line 58
	rol	edx, 16					; 00000010H
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], edx
	pop	esi
; Line 59
	ret	0
_SIPROUND ENDP
_TEXT	ENDS
PUBLIC	_halfsiphash
; Function compile flags: /Ogspy
;	COMDAT _halfsiphash
_TEXT	SEGMENT
_v$ = -16						; size = 16
tv271 = 8						; size = 4
_in$ = 8						; size = 4
tv331 = 12						; size = 4
_inlen$ = 12						; size = 4
_b$ = 16						; size = 4
_k$ = 16						; size = 4
_out$ = 20						; size = 4
_outlen$ = 24						; size = 4
_halfsiphash PROC					; COMDAT
; Line 74
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 80
	push	esi
; Line 83
	push	edi
; Line 80
	mov	eax, DWORD PTR _k$[ebp]
	movzx	ecx, BYTE PTR [eax+3]
	movzx	edx, BYTE PTR [eax+2]
	shl	ecx, 8
	or	ecx, edx
	movzx	edx, BYTE PTR [eax+1]
	shl	ecx, 8
	or	ecx, edx
	movzx	edx, BYTE PTR [eax]
; Line 81
	movzx	esi, BYTE PTR [eax+6]
	shl	ecx, 8
	or	ecx, edx
	movzx	edx, BYTE PTR [eax+7]
	shl	edx, 8
	or	edx, esi
	movzx	esi, BYTE PTR [eax+5]
	movzx	eax, BYTE PTR [eax+4]
	shl	edx, 8
	or	edx, esi
	shl	edx, 8
	or	edx, eax
; Line 83
	mov	eax, DWORD PTR _inlen$[ebp]
	mov	DWORD PTR tv331[ebp], eax
	and	DWORD PTR tv331[ebp], 3
	mov	edi, DWORD PTR _in$[ebp]
	mov	esi, edi
	sub	esi, DWORD PTR tv331[ebp]
; Line 94
	mov	DWORD PTR _v$[ebp+4], edx
	add	esi, eax
	shl	eax, 24					; 00000018H
	mov	DWORD PTR _b$[ebp], eax
	mov	eax, edx
	xor	eax, 1952801890				; 74656462H
	mov	DWORD PTR _v$[ebp+12], eax
	mov	eax, ecx
	xor	eax, 1819895653				; 6c796765H
; Line 97
	cmp	DWORD PTR _outlen$[ebp], 8
	mov	DWORD PTR _v$[ebp+8], eax
	mov	DWORD PTR _v$[ebp], ecx
	jne	SHORT $LN25@halfsiphas
; Line 98
	xor	DWORD PTR _v$[ebp+4], 238		; 000000eeH
$LN25@halfsiphas:
; Line 100
	cmp	edi, esi
	je	SHORT $LN22@halfsiphas
	push	ebx
$LL38@halfsiphas:
; Line 101
	movzx	ebx, BYTE PTR [edi+3]
	movzx	eax, BYTE PTR [edi+2]
	shl	ebx, 8
	or	ebx, eax
	movzx	eax, BYTE PTR [edi+1]
	shl	ebx, 8
	or	ebx, eax
	movzx	eax, BYTE PTR [edi]
	shl	ebx, 8
	or	ebx, eax
; Line 102
	xor	DWORD PTR _v$[ebp+12], ebx
	mov	DWORD PTR tv271[ebp], 2
$LL21@halfsiphas:
; Line 106
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	call	_SIPROUND
	dec	DWORD PTR tv271[ebp]
	pop	ecx
	jne	SHORT $LL21@halfsiphas
; Line 108
	xor	DWORD PTR _v$[ebp], ebx
	add	edi, 4
	cmp	edi, esi
	jne	SHORT $LL38@halfsiphas
	pop	ebx
$LN22@halfsiphas:
; Line 111
	mov	eax, DWORD PTR tv331[ebp]
	dec	eax
	je	SHORT $LN40@halfsiphas
	dec	eax
	je	SHORT $LN39@halfsiphas
	dec	eax
	jne	SHORT $LN41@halfsiphas
; Line 113
	movzx	eax, BYTE PTR [edi+2]
	shl	eax, 16					; 00000010H
	or	DWORD PTR _b$[ebp], eax
$LN39@halfsiphas:
; Line 115
	movzx	eax, BYTE PTR [edi+1]
	shl	eax, 8
	or	DWORD PTR _b$[ebp], eax
$LN40@halfsiphas:
; Line 117
	movzx	eax, BYTE PTR [edi]
	or	DWORD PTR _b$[ebp], eax
$LN41@halfsiphas:
; Line 123
	mov	eax, DWORD PTR _b$[ebp]
	xor	DWORD PTR _v$[ebp+12], eax
	push	2
	pop	esi
$LL12@halfsiphas:
; Line 127
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	call	_SIPROUND
	dec	esi
	pop	ecx
	jne	SHORT $LL12@halfsiphas
; Line 129
	mov	eax, DWORD PTR _b$[ebp]
	xor	DWORD PTR _v$[ebp], eax
; Line 131
	cmp	DWORD PTR _outlen$[ebp], 8
	jne	SHORT $LN9@halfsiphas
; Line 132
	xor	DWORD PTR _v$[ebp+8], 238		; 000000eeH
; Line 133
	jmp	SHORT $LN8@halfsiphas
$LN9@halfsiphas:
; Line 134
	xor	DWORD PTR _v$[ebp+8], 255		; 000000ffH
$LN8@halfsiphas:
; Line 137
	push	4
	pop	edi
	mov	esi, edi
$LL7@halfsiphas:
; Line 138
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	call	_SIPROUND
	dec	esi
	pop	ecx
	jne	SHORT $LL7@halfsiphas
; Line 140
	mov	eax, DWORD PTR _v$[ebp+12]
	xor	eax, DWORD PTR _v$[ebp+4]
; Line 141
	mov	esi, DWORD PTR _out$[ebp]
	mov	ecx, eax
	shr	ecx, 8
	mov	BYTE PTR [esi+1], cl
	mov	ecx, eax
	mov	BYTE PTR [esi], al
	shr	ecx, 16					; 00000010H
	shr	eax, 24					; 00000018H
	mov	BYTE PTR [esi+2], cl
	mov	BYTE PTR [esi+3], al
; Line 143
	cmp	DWORD PTR _outlen$[ebp], edi
; Line 144
	je	SHORT $LN42@halfsiphas
; Line 146
	xor	DWORD PTR _v$[ebp+4], 221		; 000000ddH
$LL3@halfsiphas:
; Line 150
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	call	_SIPROUND
	dec	edi
	pop	ecx
	jne	SHORT $LL3@halfsiphas
; Line 152
	mov	eax, DWORD PTR _v$[ebp+12]
	xor	eax, DWORD PTR _v$[ebp+4]
; Line 153
	mov	ecx, eax
	shr	ecx, 8
	mov	BYTE PTR [esi+5], cl
	mov	ecx, eax
	shr	ecx, 16					; 00000010H
	mov	BYTE PTR [esi+4], al
	shr	eax, 24					; 00000018H
	mov	BYTE PTR [esi+6], cl
	mov	BYTE PTR [esi+7], al
$LN42@halfsiphas:
; Line 155
	pop	edi
	xor	eax, eax
	pop	esi
; Line 156
	leave
	ret	0
_halfsiphash ENDP
_TEXT	ENDS
END
