; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\odzhan\tinycrypt\hash\siphash\sh32x.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_RSIPROUND
; Function compile flags: /Ogspy
;	COMDAT _RSIPROUND
_TEXT	SEGMENT
_v$ = 8							; size = 4
_RSIPROUND PROC						; COMDAT
; File c:\odzhan\tinycrypt\hash\siphash\sh32x.c
; Line 29
	mov	eax, DWORD PTR _v$[esp-4]
	mov	ecx, DWORD PTR [eax+4]
	add	DWORD PTR [eax], ecx
; Line 31
	mov	edx, DWORD PTR [eax]
	rol	ecx, 5
	xor	ecx, edx
	mov	DWORD PTR [eax+4], ecx
; Line 33
	mov	ecx, DWORD PTR [eax+12]
	add	DWORD PTR [eax+8], ecx
; Line 34
	rol	ecx, 8
	push	esi
; Line 35
	mov	esi, DWORD PTR [eax+8]
	xor	ecx, esi
	rol	edx, 16					; 00000010H
; Line 36
	add	edx, ecx
; Line 37
	rol	ecx, 7
; Line 38
	xor	ecx, edx
	mov	DWORD PTR [eax+12], ecx
; Line 39
	mov	ecx, DWORD PTR [eax+4]
	add	esi, ecx
	mov	DWORD PTR [eax], edx
; Line 41
	mov	edx, esi
	rol	ecx, 13					; 0000000dH
	xor	ecx, edx
; Line 42
	rol	edx, 16					; 00000010H
	mov	DWORD PTR [eax+4], ecx
	mov	DWORD PTR [eax+8], edx
	pop	esi
; Line 43
	ret	0
_RSIPROUND ENDP
_TEXT	ENDS
PUBLIC	_sh32x
; Function compile flags: /Ogspy
;	COMDAT _sh32x
_TEXT	SEGMENT
_v$ = -16						; size = 16
tv158 = 8						; size = 4
_data$ = 8						; size = 4
_inlen$ = 12						; size = 4
_b$ = 16						; size = 4
_key$ = 16						; size = 4
_sh32x	PROC						; COMDAT
; Line 49
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 59
	mov	edx, DWORD PTR _inlen$[ebp]
	mov	ecx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+4]
	push	ebx
	push	esi
	mov	esi, DWORD PTR _data$[ebp]
	push	edi
	mov	edi, edx
	and	edi, 3
	mov	ebx, esi
	sub	esi, edi
	add	esi, edx
; Line 61
	shl	edx, 24					; 00000018H
; Line 63
	mov	DWORD PTR _v$[ebp], eax
; Line 65
	xor	eax, 1819895653				; 6c796765H
	mov	DWORD PTR _v$[ebp+4], ecx
; Line 66
	xor	ecx, 1952801890				; 74656462H
	mov	DWORD PTR _b$[ebp], edx
	mov	DWORD PTR _v$[ebp+8], eax
	mov	DWORD PTR _v$[ebp+12], ecx
	jmp	SHORT $LN29@sh32x
$LL27@sh32x:
; Line 70
	mov	eax, DWORD PTR [ebx]
	xor	DWORD PTR _v$[ebp+12], eax
	mov	DWORD PTR tv158[ebp], 2
$LL11@sh32x:
; Line 73
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	call	_RSIPROUND
	dec	DWORD PTR tv158[ebp]
	pop	ecx
	jne	SHORT $LL11@sh32x
; Line 75
	mov	eax, DWORD PTR [ebx]
	xor	DWORD PTR _v$[ebp], eax
	add	ebx, 4
$LN29@sh32x:
; Line 68
	cmp	ebx, esi
	jne	SHORT $LL27@sh32x
; Line 78
	dec	edi
	js	SHORT $LN28@sh32x
	mov	ecx, edi
	shl	ecx, 3
$LL8@sh32x:
; Line 79
	movzx	eax, BYTE PTR [edi+ebx]
	shl	eax, cl
	sub	ecx, 8
	or	DWORD PTR _b$[ebp], eax
	dec	edi
	jns	SHORT $LL8@sh32x
$LN28@sh32x:
; Line 82
	mov	eax, DWORD PTR _b$[ebp]
	xor	DWORD PTR _v$[ebp+12], eax
	push	2
	pop	esi
$LL6@sh32x:
; Line 85
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	call	_RSIPROUND
	dec	esi
	pop	ecx
	jne	SHORT $LL6@sh32x
; Line 87
	mov	eax, DWORD PTR _b$[ebp]
	xor	DWORD PTR _v$[ebp], eax
; Line 88
	xor	DWORD PTR _v$[ebp+8], 255		; 000000ffH
	push	4
	pop	esi
$LL3@sh32x:
; Line 91
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	call	_RSIPROUND
	dec	esi
	pop	ecx
	jne	SHORT $LL3@sh32x
; Line 93
	mov	eax, DWORD PTR _v$[ebp+12]
	xor	eax, DWORD PTR _v$[ebp+4]
	pop	edi
	pop	esi
	pop	ebx
; Line 94
	leave
	ret	0
_sh32x	ENDP
_TEXT	ENDS
END
