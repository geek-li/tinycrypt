; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\odzhan\tinycrypt\hash\siphash\sh32.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_XXSIPROUND
; Function compile flags: /Ogspy
;	COMDAT _XXSIPROUND
_TEXT	SEGMENT
_v$ = 8							; size = 4
_w$ = 12						; size = 4
_last$ = 16						; size = 1
_XXSIPROUND PROC					; COMDAT
; File c:\odzhan\tinycrypt\hash\siphash\sh32.c
; Line 28
	push	ebp
	mov	ebp, esp
; Line 31
	mov	cl, BYTE PTR _last$[ebp]
	mov	eax, DWORD PTR _v$[ebp]
	neg	cl
	push	ebx
; Line 32
	movzx	ebx, BYTE PTR _last$[ebp]
	movzx	ecx, cl
	xor	DWORD PTR [eax+8], ecx
; Line 34
	mov	ecx, DWORD PTR _w$[ebp]
	xor	DWORD PTR [eax+12], ecx
	push	esi
	mov	esi, DWORD PTR [eax+12]
	lea	ebx, DWORD PTR [ebx+ebx+2]
	push	edi
	mov	edi, DWORD PTR [eax+8]
; Line 36
	test	ebx, ebx
	jle	SHORT $LN1@XXSIPROUND
	mov	ecx, DWORD PTR [eax]
	mov	edx, DWORD PTR [eax+4]
$LL3@XXSIPROUND:
; Line 38
	add	ecx, edx
; Line 39
	rol	edx, 5
; Line 40
	xor	edx, ecx
; Line 42
	add	edi, esi
; Line 43
	rol	esi, 8
; Line 44
	xor	esi, edi
	rol	ecx, 16					; 00000010H
; Line 45
	add	ecx, esi
; Line 46
	rol	esi, 7
; Line 48
	add	edi, edx
	xor	esi, ecx
; Line 49
	rol	edx, 13					; 0000000dH
; Line 50
	xor	edx, edi
; Line 51
	rol	edi, 16					; 00000010H
	dec	ebx
	mov	DWORD PTR [eax], ecx
	jne	SHORT $LL3@XXSIPROUND
	mov	DWORD PTR [eax+8], edi
	mov	DWORD PTR [eax+12], esi
	mov	DWORD PTR [eax+4], edx
$LN1@XXSIPROUND:
; Line 53
	mov	ecx, DWORD PTR _w$[ebp]
	xor	DWORD PTR [eax], ecx
	pop	edi
	pop	esi
	pop	ebx
; Line 54
	pop	ebp
	ret	0
_XXSIPROUND ENDP
_TEXT	ENDS
PUBLIC	_sh32
; Function compile flags: /Ogspy
;	COMDAT _sh32
_TEXT	SEGMENT
_v$ = -16						; size = 16
_i$ = 8							; size = 1
_data$ = 8						; size = 4
_inlen$ = 12						; size = 4
_b$ = 16						; size = 4
_key$ = 16						; size = 4
_sh32	PROC						; COMDAT
; Line 56
	push	ebp
	mov	ebp, esp
	sub	esp, 16					; 00000010H
; Line 68
	mov	edx, DWORD PTR _inlen$[ebp]
	mov	ecx, DWORD PTR _key$[ebp]
	mov	eax, DWORD PTR [ecx]
	mov	ecx, DWORD PTR [ecx+4]
	push	ebx
	push	esi
	push	edi
	mov	edi, DWORD PTR _data$[ebp]
	mov	esi, edx
	and	esi, 3
	mov	ebx, edi
; Line 69
	sub	edi, esi
	add	edi, edx
; Line 70
	shl	edx, 24					; 00000018H
; Line 72
	mov	DWORD PTR _v$[ebp], eax
; Line 74
	xor	eax, 1819895653				; 6c796765H
	mov	DWORD PTR _v$[ebp+4], ecx
; Line 75
	xor	ecx, 1952801890				; 74656462H
	mov	DWORD PTR _b$[ebp], edx
	mov	DWORD PTR _v$[ebp+8], eax
	mov	DWORD PTR _v$[ebp+12], ecx
	jmp	SHORT $LN18@sh32
$LL8@sh32:
; Line 79
	push	0
	push	DWORD PTR [ebx]
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	call	_XXSIPROUND
	add	esp, 12					; 0000000cH
	add	ebx, 4
$LN18@sh32:
; Line 77
	cmp	ebx, edi
	jne	SHORT $LL8@sh32
; Line 82
	dec	esi
	js	SHORT $LN4@sh32
	mov	ecx, esi
	shl	ecx, 3
$LL5@sh32:
; Line 83
	movzx	eax, BYTE PTR [esi+ebx]
	shl	eax, cl
	sub	ecx, 8
	or	DWORD PTR _b$[ebp], eax
	dec	esi
	jns	SHORT $LL5@sh32
$LN4@sh32:
	pop	edi
	pop	esi
; Line 86
	mov	BYTE PTR _i$[ebp], 0
	pop	ebx
$LL17@sh32:
; Line 87
	push	DWORD PTR _i$[ebp]
	lea	eax, DWORD PTR _v$[ebp]
	push	DWORD PTR _b$[ebp]
	push	eax
	call	_XXSIPROUND
; Line 88
	and	DWORD PTR _b$[ebp], 0
	add	esp, 12					; 0000000cH
	inc	BYTE PTR _i$[ebp]
	cmp	BYTE PTR _i$[ebp], 2
	jb	SHORT $LL17@sh32
; Line 91
	mov	eax, DWORD PTR _v$[ebp+12]
	xor	eax, DWORD PTR _v$[ebp+4]
; Line 92
	leave
	ret	0
_sh32	ENDP
_TEXT	ENDS
END
