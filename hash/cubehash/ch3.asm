; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	c:\odzhan\tinycrypt\hash\cubehash\ch3.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_transform
; Function compile flags: /Ogspy
;	COMDAT _transform
_TEXT	SEGMENT
_y$ = -84						; size = 64
_n$ = -20						; size = 4
_j$ = -16						; size = 4
_k$ = -12						; size = 4
tv355 = -8						; size = 4
tv388 = -4						; size = 4
_c$ = 8							; size = 4
tv770 = 12						; size = 4
_cnt$ = 12						; size = 4
_transform PROC						; COMDAT
; File c:\odzhan\tinycrypt\hash\cubehash\ch3.c
; Line 34
	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
; Line 38
	mov	eax, DWORD PTR _cnt$[ebp]
	mov	DWORD PTR _n$[ebp], eax
	test	eax, eax
	jle	$LN22@transform
	mov	eax, DWORD PTR _c$[ebp]
	push	ebx
	push	esi
	push	edi
	push	15					; 0000000fH
	pop	edi
; Line 40
	lea	ecx, DWORD PTR [eax+76]
	add	eax, 140				; 0000008cH
	push	4
	mov	DWORD PTR tv388[ebp], ecx
	mov	DWORD PTR tv355[ebp], eax
	pop	esi
$LL43@transform:
	mov	DWORD PTR _k$[ebp], 7
	mov	DWORD PTR _j$[ebp], 2
	mov	DWORD PTR tv770[ebp], 8
$LL44@transform:
; Line 42
	mov	eax, DWORD PTR tv355[ebp]
	mov	edx, edi
$LL18@transform:
	mov	ecx, DWORD PTR [eax-64]
	add	DWORD PTR [eax], ecx
	sub	eax, esi
	dec	edx
	jns	SHORT $LL18@transform
; Line 43
	mov	eax, DWORD PTR tv388[ebp]
	mov	edx, edi
$LL45@transform:
	mov	ecx, DWORD PTR tv770[ebp]
	mov	ebx, DWORD PTR [eax]
	xor	ecx, edx
	sub	eax, esi
	dec	edx
	mov	DWORD PTR _y$[ebp+ecx*4], ebx
	jns	SHORT $LL45@transform
; Line 44
	mov	edx, DWORD PTR tv388[ebp]
	mov	eax, edi
$LL12@transform:
	mov	ebx, DWORD PTR _y$[ebp+eax*4]
	mov	ecx, DWORD PTR _k$[ebp]
	rol	ebx, cl
	mov	DWORD PTR [edx], ebx
	sub	edx, esi
	dec	eax
	jns	SHORT $LL12@transform
; Line 46
	mov	eax, DWORD PTR tv388[ebp]
	mov	edx, edi
$LL9@transform:
	mov	ecx, DWORD PTR [eax+64]
	xor	DWORD PTR [eax], ecx
	sub	eax, esi
	dec	edx
	jns	SHORT $LL9@transform
; Line 47
	mov	eax, DWORD PTR tv355[ebp]
	mov	edx, edi
$LL6@transform:
	mov	ebx, DWORD PTR [eax]
	mov	ecx, edx
	xor	ecx, DWORD PTR _j$[ebp]
	sub	eax, esi
	dec	edx
	mov	DWORD PTR _y$[ebp+ecx*4], ebx
	jns	SHORT $LL6@transform
; Line 48
	mov	edx, DWORD PTR tv355[ebp]
	mov	eax, edi
$LL3@transform:
	mov	ecx, DWORD PTR _y$[ebp+eax*4]
	mov	DWORD PTR [edx], ecx
	sub	edx, esi
	dec	eax
	jns	SHORT $LL3@transform
; Line 40
	add	DWORD PTR _k$[ebp], esi
	sub	DWORD PTR tv770[ebp], esi
	dec	DWORD PTR _j$[ebp]
	cmp	DWORD PTR tv770[ebp], 0
	jg	SHORT $LL44@transform
; Line 38
	dec	DWORD PTR _n$[ebp]
	cmp	DWORD PTR _n$[ebp], 0
	jg	$LL43@transform
	pop	edi
	pop	esi
	pop	ebx
$LN22@transform:
; Line 51
	leave
	ret	0
_transform ENDP
_TEXT	ENDS
PUBLIC	_cube_init
; Function compile flags: /Ogspy
;	COMDAT _cube_init
_TEXT	SEGMENT
_c$ = 8							; size = 4
_r$ = 12						; size = 4
_b$ = 16						; size = 4
_h$ = 20						; size = 4
_cube_init PROC						; COMDAT
; Line 54
	push	ebx
	push	esi
; Line 58
	mov	esi, DWORD PTR _c$[esp+4]
	push	edi
; Line 59
	xor	eax, eax
	push	32					; 00000020H
	pop	ecx
	lea	edi, DWORD PTR [esi+16]
	rep stosd
; Line 63
	mov	ecx, DWORD PTR _r$[esp+8]
; Line 65
	mov	eax, DWORD PTR _h$[esp+8]
	mov	edi, DWORD PTR _b$[esp+8]
; Line 70
	and	DWORD PTR [esi+12], 0
	mov	DWORD PTR [esi], ecx
	mov	DWORD PTR [esi+24], ecx
; Line 72
	imul	ecx, 10					; 0000000aH
	mov	DWORD PTR [esi+8], eax
	cdq
	and	edx, 7
	add	eax, edx
	push	ecx
	sar	eax, 3
	push	esi
	mov	DWORD PTR [esi+4], edi
	mov	DWORD PTR [esi+16], eax
	mov	DWORD PTR [esi+20], edi
	call	_transform
	pop	ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
; Line 73
	ret	0
_cube_init ENDP
_TEXT	ENDS
PUBLIC	_cube_update
; Function compile flags: /Ogspy
;	COMDAT _cube_update
_TEXT	SEGMENT
_c$ = 8							; size = 4
_in$ = 12						; size = 4
_len$ = 16						; size = 4
_cube_update PROC					; COMDAT
; Line 76
	push	ebp
	mov	ebp, esp
; Line 79
	cmp	DWORD PTR _len$[ebp], 0
	je	SHORT $LN2@cube_updat
; Line 81
	push	edi
	xor	edi, edi
	cmp	DWORD PTR _len$[ebp], edi
	jbe	SHORT $LN10@cube_updat
	push	esi
	mov	esi, DWORD PTR _c$[ebp]
$LL4@cube_updat:
; Line 82
	mov	eax, DWORD PTR [esi+12]
	mov	ecx, DWORD PTR _in$[ebp]
	mov	cl, BYTE PTR [edi+ecx]
	lea	eax, DWORD PTR [eax+esi+16]
	xor	BYTE PTR [eax], cl
	inc	DWORD PTR [esi+12]
	mov	eax, DWORD PTR [esi+12]
; Line 83
	cmp	eax, DWORD PTR [esi+4]
	jne	SHORT $LN3@cube_updat
; Line 84
	push	DWORD PTR [esi]
	push	esi
	call	_transform
; Line 85
	and	DWORD PTR [esi+12], 0
	pop	ecx
	pop	ecx
$LN3@cube_updat:
; Line 81
	inc	edi
	cmp	edi, DWORD PTR _len$[ebp]
	jb	SHORT $LL4@cube_updat
	pop	esi
$LN10@cube_updat:
	pop	edi
$LN2@cube_updat:
; Line 88
	pop	ebp
	ret	0
_cube_update ENDP
_TEXT	ENDS
PUBLIC	_cube_final
; Function compile flags: /Ogspy
;	COMDAT _cube_final
_TEXT	SEGMENT
_out$ = 8						; size = 4
_c$ = 12						; size = 4
_cube_final PROC					; COMDAT
; Line 91
	push	esi
; Line 95
	mov	esi, DWORD PTR _c$[esp]
	mov	eax, DWORD PTR [esi+12]
	lea	eax, DWORD PTR [eax+esi+16]
	xor	BYTE PTR [eax], 128			; 00000080H
; Line 96
	push	DWORD PTR [esi]
	push	esi
	call	_transform
; Line 100
	mov	eax, DWORD PTR [esi]
	xor	DWORD PTR [esi+140], 1
	imul	eax, 10					; 0000000aH
	push	eax
	push	esi
	call	_transform
; Line 103
	mov	eax, DWORD PTR [esi+8]
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	add	esp, 16					; 00000010H
	xor	ecx, ecx
	test	eax, eax
	jle	SHORT $LN1@cube_final
$LL3@cube_final:
; Line 104
	mov	al, BYTE PTR [esi+ecx+16]
	mov	edx, DWORD PTR _out$[esp]
	mov	BYTE PTR [ecx+edx], al
	mov	eax, DWORD PTR [esi+8]
	cdq
	and	edx, 7
	add	eax, edx
	inc	ecx
	sar	eax, 3
	cmp	ecx, eax
	jl	SHORT $LL3@cube_final
$LN1@cube_final:
	pop	esi
; Line 105
	ret	0
_cube_final ENDP
_TEXT	ENDS
END
