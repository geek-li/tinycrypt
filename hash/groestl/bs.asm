; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\odzhan\tinycrypt\hash\groestl\bs.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

CONST	SEGMENT
_S	DB	063H
	DB	07cH
	DB	077H
	DB	07bH
	DB	0f2H
	DB	06bH
	DB	06fH
	DB	0c5H
	DB	030H
	DB	01H
	DB	067H
	DB	02bH
	DB	0feH
	DB	0d7H
	DB	0abH
	DB	076H
	DB	0caH
	DB	082H
	DB	0c9H
	DB	07dH
	DB	0faH
	DB	059H
	DB	047H
	DB	0f0H
	DB	0adH
	DB	0d4H
	DB	0a2H
	DB	0afH
	DB	09cH
	DB	0a4H
	DB	072H
	DB	0c0H
	DB	0b7H
	DB	0fdH
	DB	093H
	DB	026H
	DB	036H
	DB	03fH
	DB	0f7H
	DB	0ccH
	DB	034H
	DB	0a5H
	DB	0e5H
	DB	0f1H
	DB	071H
	DB	0d8H
	DB	031H
	DB	015H
	DB	04H
	DB	0c7H
	DB	023H
	DB	0c3H
	DB	018H
	DB	096H
	DB	05H
	DB	09aH
	DB	07H
	DB	012H
	DB	080H
	DB	0e2H
	DB	0ebH
	DB	027H
	DB	0b2H
	DB	075H
	DB	09H
	DB	083H
	DB	02cH
	DB	01aH
	DB	01bH
	DB	06eH
	DB	05aH
	DB	0a0H
	DB	052H
	DB	03bH
	DB	0d6H
	DB	0b3H
	DB	029H
	DB	0e3H
	DB	02fH
	DB	084H
	DB	053H
	DB	0d1H
	DB	00H
	DB	0edH
	DB	020H
	DB	0fcH
	DB	0b1H
	DB	05bH
	DB	06aH
	DB	0cbH
	DB	0beH
	DB	039H
	DB	04aH
	DB	04cH
	DB	058H
	DB	0cfH
	DB	0d0H
	DB	0efH
	DB	0aaH
	DB	0fbH
	DB	043H
	DB	04dH
	DB	033H
	DB	085H
	DB	045H
	DB	0f9H
	DB	02H
	DB	07fH
	DB	050H
	DB	03cH
	DB	09fH
	DB	0a8H
	DB	051H
	DB	0a3H
	DB	040H
	DB	08fH
	DB	092H
	DB	09dH
	DB	038H
	DB	0f5H
	DB	0bcH
	DB	0b6H
	DB	0daH
	DB	021H
	DB	010H
	DB	0ffH
	DB	0f3H
	DB	0d2H
	DB	0cdH
	DB	0cH
	DB	013H
	DB	0ecH
	DB	05fH
	DB	097H
	DB	044H
	DB	017H
	DB	0c4H
	DB	0a7H
	DB	07eH
	DB	03dH
	DB	064H
	DB	05dH
	DB	019H
	DB	073H
	DB	060H
	DB	081H
	DB	04fH
	DB	0dcH
	DB	022H
	DB	02aH
	DB	090H
	DB	088H
	DB	046H
	DB	0eeH
	DB	0b8H
	DB	014H
	DB	0deH
	DB	05eH
	DB	0bH
	DB	0dbH
	DB	0e0H
	DB	032H
	DB	03aH
	DB	0aH
	DB	049H
	DB	06H
	DB	024H
	DB	05cH
	DB	0c2H
	DB	0d3H
	DB	0acH
	DB	062H
	DB	091H
	DB	095H
	DB	0e4H
	DB	079H
	DB	0e7H
	DB	0c8H
	DB	037H
	DB	06dH
	DB	08dH
	DB	0d5H
	DB	04eH
	DB	0a9H
	DB	06cH
	DB	056H
	DB	0f4H
	DB	0eaH
	DB	065H
	DB	07aH
	DB	0aeH
	DB	08H
	DB	0baH
	DB	078H
	DB	025H
	DB	02eH
	DB	01cH
	DB	0a6H
	DB	0b4H
	DB	0c6H
	DB	0e8H
	DB	0ddH
	DB	074H
	DB	01fH
	DB	04bH
	DB	0bdH
	DB	08bH
	DB	08aH
	DB	070H
	DB	03eH
	DB	0b5H
	DB	066H
	DB	048H
	DB	03H
	DB	0f6H
	DB	0eH
	DB	061H
	DB	035H
	DB	057H
	DB	0b9H
	DB	086H
	DB	0c1H
	DB	01dH
	DB	09eH
	DB	0e1H
	DB	0f8H
	DB	098H
	DB	011H
	DB	069H
	DB	0d9H
	DB	08eH
	DB	094H
	DB	09bH
	DB	01eH
	DB	087H
	DB	0e9H
	DB	0ceH
	DB	055H
	DB	028H
	DB	0dfH
	DB	08cH
	DB	0a1H
	DB	089H
	DB	0dH
	DB	0bfH
	DB	0e6H
	DB	042H
	DB	068H
	DB	041H
	DB	099H
	DB	02dH
	DB	0fH
	DB	0b0H
	DB	054H
	DB	0bbH
	DB	016H
_columnconstant DD 030201000H
	DD	070605040H
_shiftvalues DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	01H
	DB	03H
	DB	05H
	DB	07H
	DB	00H
	DB	02H
	DB	04H
	DB	06H
CONST	ENDS
PUBLIC	_mixbytes
; Function compile flags: /Ogspy
;	COMDAT _mixbytes
_TEXT	SEGMENT
tv521 = 8						; size = 4
_a$ = 8							; size = 4
_b$ = 12						; size = 4
_i$ = 16						; size = 4
_s$ = 16						; size = 4
_mixbytes PROC						; COMDAT
; File c:\odzhan\tinycrypt\hash\groestl\bs.c
; Line 33
	push	ebp
	mov	ebp, esp
; Line 37
	mov	eax, DWORD PTR _b$[ebp]
	push	esi
	mov	esi, DWORD PTR _a$[ebp]
	push	edi
	mov	edi, DWORD PTR _s$[ebp]
	lea	edx, DWORD PTR [esi+edi*4]
	xor	ecx, ecx
	mov	DWORD PTR tv521[ebp], edx
	push	ebx
$LL30@mixbytes:
; Line 38
	mov	ebx, DWORD PTR [edx]
	mov	DWORD PTR [eax+ecx*4], ebx
	inc	ecx
	add	edx, 8
	cmp	ecx, 8
	jl	SHORT $LL30@mixbytes
; Line 41
	mov	edx, DWORD PTR tv521[ebp]
	xor	ecx, ecx
$LL27@mixbytes:
; Line 42
	lea	ebx, DWORD PTR [ecx+2]
	and	ebx, -2147483641			; 80000007H
	jns	SHORT $LN53@mixbytes
	dec	ebx
	or	ebx, -8					; fffffff8H
	inc	ebx
$LN53@mixbytes:
	mov	ebx, DWORD PTR [eax+ebx*4]
	mov	DWORD PTR [edx], ebx
	inc	ecx
	add	edx, 8
	cmp	ecx, 8
	jl	SHORT $LL27@mixbytes
; Line 45
	xor	ecx, ecx
$LL24@mixbytes:
; Line 46
	lea	edx, DWORD PTR [ecx+1]
	mov	ebx, edx
	and	ebx, -2147483641			; 80000007H
	lea	ecx, DWORD PTR [eax+ecx*4]
	jns	SHORT $LN54@mixbytes
	dec	ebx
	or	ebx, -8					; fffffff8H
	inc	ebx
$LN54@mixbytes:
	mov	ebx, DWORD PTR [eax+ebx*4]
	xor	DWORD PTR [ecx], ebx
	mov	ecx, edx
	cmp	ecx, 7
	jl	SHORT $LL24@mixbytes
; Line 47
	mov	ecx, DWORD PTR [esi+edi*4+48]
	xor	DWORD PTR [eax+28], ecx
	mov	ecx, DWORD PTR tv521[ebp]
	push	8
; Line 50
	xor	edx, edx
	pop	esi
$LL21@mixbytes:
; Line 51
	lea	edi, DWORD PTR [edx+4]
	and	edi, -2147483641			; 80000007H
	jns	SHORT $LN55@mixbytes
	dec	edi
	or	edi, -8					; fffffff8H
	inc	edi
$LN55@mixbytes:
	mov	edi, DWORD PTR [eax+edi*4]
	xor	DWORD PTR [ecx], edi
	inc	edx
	add	ecx, esi
	cmp	edx, esi
	jl	SHORT $LL21@mixbytes
; Line 54
	mov	ecx, DWORD PTR tv521[ebp]
	xor	edx, edx
$LL18@mixbytes:
; Line 55
	lea	edi, DWORD PTR [edx+6]
	and	edi, -2147483641			; 80000007H
	jns	SHORT $LN56@mixbytes
	dec	edi
	or	edi, -8					; fffffff8H
	inc	edi
$LN56@mixbytes:
	mov	edi, DWORD PTR [eax+edi*4]
	xor	DWORD PTR [ecx], edi
	inc	edx
	add	ecx, esi
	cmp	edx, esi
	jl	SHORT $LL18@mixbytes
; Line 58
	mov	ecx, DWORD PTR [eax]
; Line 59
	mov	edx, DWORD PTR [eax+4]
; Line 60
	mov	esi, DWORD PTR [eax+8]
; Line 61
	and	DWORD PTR _i$[ebp], 0
$LL15@mixbytes:
	mov	ebx, DWORD PTR _i$[ebp]
	lea	edi, DWORD PTR [eax+ebx*4]
; Line 62
	add	ebx, 3
	and	ebx, -2147483641			; 80000007H
	jns	SHORT $LN57@mixbytes
	dec	ebx
	or	ebx, -8					; fffffff8H
	inc	ebx
$LN57@mixbytes:
	mov	ebx, DWORD PTR [eax+ebx*4]
	xor	DWORD PTR [edi], ebx
	inc	DWORD PTR _i$[ebp]
	cmp	DWORD PTR _i$[ebp], 5
	jl	SHORT $LL15@mixbytes
; Line 65
	xor	DWORD PTR [eax+28], esi
	xor	DWORD PTR [eax+20], ecx
	xor	DWORD PTR [eax+24], edx
; Line 68
	xor	edi, edi
	mov	esi, -2139062144			; 80808080H
$LL12@mixbytes:
	lea	edx, DWORD PTR [eax+edi*4]
; Line 69
	mov	ecx, DWORD PTR [edx]
	mov	ebx, DWORD PTR [edx]
	and	ecx, esi
	xor	ebx, ecx
	add	ebx, ebx
	mov	DWORD PTR [edx], ebx
	shr	ecx, 7
	lea	ebx, DWORD PTR [ecx+ecx]
	xor	ecx, ebx
	mov	ebx, ecx
	shl	ebx, 3
	xor	ebx, DWORD PTR [edx]
	xor	ebx, ecx
	inc	edi
	mov	DWORD PTR [edx], ebx
	cmp	edi, 8
	jl	SHORT $LL12@mixbytes
; Line 72
	mov	edx, DWORD PTR tv521[ebp]
	xor	ecx, ecx
$LL9@mixbytes:
; Line 73
	mov	edi, DWORD PTR [edx]
	xor	DWORD PTR [eax+ecx*4], edi
	inc	ecx
	add	edx, 8
	cmp	ecx, 8
	jl	SHORT $LL9@mixbytes
; Line 76
	xor	edi, edi
$LL6@mixbytes:
	lea	edx, DWORD PTR [eax+edi*4]
; Line 77
	mov	ecx, DWORD PTR [edx]
	mov	ebx, DWORD PTR [edx]
	and	ecx, esi
	xor	ebx, ecx
	add	ebx, ebx
	mov	DWORD PTR [edx], ebx
	shr	ecx, 7
	lea	ebx, DWORD PTR [ecx+ecx]
	xor	ecx, ebx
	mov	ebx, ecx
	shl	ebx, 3
	xor	ebx, DWORD PTR [edx]
	xor	ebx, ecx
	inc	edi
	mov	DWORD PTR [edx], ebx
	cmp	edi, 8
	jl	SHORT $LL6@mixbytes
; Line 80
	mov	ecx, DWORD PTR tv521[ebp]
	xor	edx, edx
	pop	ebx
$LL3@mixbytes:
; Line 81
	lea	esi, DWORD PTR [edx+3]
	and	esi, -2147483641			; 80000007H
	jns	SHORT $LN58@mixbytes
	dec	esi
	or	esi, -8					; fffffff8H
	inc	esi
$LN58@mixbytes:
	mov	esi, DWORD PTR [eax+esi*4]
	xor	DWORD PTR [ecx], esi
	inc	edx
	add	ecx, 8
	cmp	edx, 8
	jl	SHORT $LL3@mixbytes
	pop	edi
	pop	esi
; Line 82
	pop	ebp
	ret	0
_mixbytes ENDP
_TEXT	ENDS
PUBLIC	_permutation
; Function compile flags: /Ogspy
;	COMDAT _permutation
_TEXT	SEGMENT
_tmp$ = -36						; size = 32
_constant$ = -4						; size = 4
_x$ = 8							; size = 4
_q$ = 12						; size = 4
_permutation PROC					; COMDAT
; Line 85
	push	ebp
	mov	ebp, esp
	sub	esp, 36					; 00000024H
; Line 90
	and	DWORD PTR _constant$[ebp], 0
	push	ebx
	mov	ebx, DWORD PTR _x$[ebp]
	push	esi
	push	edi
$LL45@permutatio:
; Line 92
	xor	eax, eax
	cmp	DWORD PTR _q$[ebp], eax
	jne	SHORT $LL23@permutatio
; Line 94
	mov	ecx, OFFSET _columnconstant
	push	2
	mov	eax, ebx
	sub	ecx, ebx
	pop	edx
$LL22@permutatio:
; Line 95
	mov	esi, DWORD PTR [ecx+eax]
	xor	esi, DWORD PTR [eax]
	xor	esi, DWORD PTR _constant$[ebp]
	mov	DWORD PTR [eax], esi
	add	eax, 4
	dec	edx
	jne	SHORT $LL22@permutatio
; Line 97
	jmp	SHORT $LN13@permutatio
$LL23@permutatio:
; Line 100
	not	DWORD PTR [ebx+eax*4]
	inc	eax
	cmp	eax, 16					; 00000010H
	jl	SHORT $LL23@permutatio
; Line 101
	mov	ecx, OFFSET _columnconstant
	lea	eax, DWORD PTR [ebx+56]
$LL15@permutatio:
; Line 102
	mov	edx, DWORD PTR [eax]
	xor	edx, DWORD PTR _constant$[ebp]
	xor	edx, DWORD PTR [ecx]
	add	ecx, 4
	mov	DWORD PTR [eax], edx
	add	eax, 4
	cmp	ecx, OFFSET _columnconstant+8
	jl	SHORT $LL15@permutatio
$LN13@permutatio:
; Line 104
	xor	ecx, ecx
	mov	eax, ebx
$LL12@permutatio:
; Line 107
	mov	esi, eax
	lea	edi, DWORD PTR _tmp$[ebp]
	movsd
	movsd
; Line 108
	xor	esi, esi
$LL6@permutatio:
; Line 109
	mov	edx, DWORD PTR _q$[ebp]
	movzx	edx, BYTE PTR _shiftvalues[ecx+edx*8]
	add	edx, esi
	and	edx, -2147483641			; 80000007H
	jns	SHORT $LN46@permutatio
	dec	edx
	or	edx, -8					; fffffff8H
	inc	edx
$LN46@permutatio:
	movzx	edx, BYTE PTR _tmp$[ebp+edx]
	mov	dl, BYTE PTR _S[edx]
	inc	esi
	mov	BYTE PTR [eax], dl
	inc	eax
	cmp	esi, 8
	jl	SHORT $LL6@permutatio
; Line 104
	inc	ecx
	cmp	ecx, 8
	jl	SHORT $LL12@permutatio
; Line 112
	xor	esi, esi
$LL3@permutatio:
; Line 113
	push	esi
	lea	eax, DWORD PTR _tmp$[ebp]
	push	eax
	push	ebx
	call	_mixbytes
	add	esp, 12					; 0000000cH
	inc	esi
	cmp	esi, 2
	jl	SHORT $LL3@permutatio
; Line 90
	add	DWORD PTR _constant$[ebp], 16843009	; 01010101H
	cmp	DWORD PTR _constant$[ebp], 168430090	; 0a0a0a0aH
	jb	$LL45@permutatio
	pop	edi
	pop	esi
	pop	ebx
; Line 115
	leave
	ret	0
_permutation ENDP
_TEXT	ENDS
PUBLIC	_memxor
; Function compile flags: /Ogspy
;	COMDAT _memxor
_TEXT	SEGMENT
_dest$ = 8						; size = 4
_src$ = 12						; size = 4
_n$ = 16						; size = 4
_memxor	PROC						; COMDAT
; Line 118
	push	ebp
	mov	ebp, esp
; Line 119
	cmp	DWORD PTR _n$[ebp], 0
	je	SHORT $LN6@memxor
	mov	ecx, DWORD PTR _src$[ebp]
	mov	eax, DWORD PTR _dest$[ebp]
	sub	ecx, eax
$LL2@memxor:
; Line 121
	mov	edx, DWORD PTR [ecx+eax]
	xor	DWORD PTR [eax], edx
	dec	DWORD PTR _n$[ebp]
; Line 122
	add	eax, 4
	cmp	DWORD PTR _n$[ebp], 0
	jne	SHORT $LL2@memxor
$LN6@memxor:
; Line 125
	pop	ebp
	ret	0
_memxor	ENDP
_TEXT	ENDS
PUBLIC	_setmessage
; Function compile flags: /Ogspy
;	COMDAT _setmessage
_TEXT	SEGMENT
_buffer$ = 8						; size = 4
_in$ = 12						; size = 4
_s$ = 16						; size = 3
_inlen$ = 20						; size = 4
_setmessage PROC					; COMDAT
; Line 134
	push	ebp
	mov	ebp, esp
	push	esi
; Line 136
	movzx	esi, BYTE PTR _s$[ebp]
	xor	ecx, ecx
	push	edi
	test	esi, esi
	jle	SHORT $LN10@setmessage
$LL12@setmessage:
; Line 137
	mov	edi, ecx
	and	edi, -2147483641			; 80000007H
	jns	SHORT $LN21@setmessage
	dec	edi
	or	edi, -8					; fffffff8H
	inc	edi
$LN21@setmessage:
	mov	eax, ecx
	cdq
	and	edx, 7
	add	eax, edx
	mov	edx, DWORD PTR _in$[ebp]
	mov	dl, BYTE PTR [ecx+edx]
	sar	eax, 3
	add	eax, DWORD PTR _buffer$[ebp]
	inc	ecx
	mov	BYTE PTR [eax+edi*8], dl
	cmp	ecx, esi
	jl	SHORT $LL12@setmessage
$LN10@setmessage:
; Line 139
	cmp	BYTE PTR _s$[ebp], 64			; 00000040H
	je	$LN1@setmessage
; Line 141
	cmp	BYTE PTR _s$[ebp+1], 0
	je	SHORT $LN25@setmessage
; Line 143
	mov	esi, ecx
	and	esi, -2147483641			; 80000007H
	jns	SHORT $LN22@setmessage
	dec	esi
	or	esi, -8					; fffffff8H
	inc	esi
$LN22@setmessage:
	mov	eax, ecx
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	add	eax, DWORD PTR _buffer$[ebp]
	mov	BYTE PTR [eax+esi*8], 128		; 00000080H
; Line 147
	jmp	SHORT $LN26@setmessage
$LL7@setmessage:
; Line 148
	mov	esi, ecx
	and	esi, -2147483641			; 80000007H
	jns	SHORT $LN23@setmessage
	dec	esi
	or	esi, -8					; fffffff8H
	inc	esi
$LN23@setmessage:
	mov	eax, ecx
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	add	eax, DWORD PTR _buffer$[ebp]
	mov	BYTE PTR [eax+esi*8], 0
$LN26@setmessage:
; Line 147
	inc	ecx
$LN25@setmessage:
	cmp	ecx, 64					; 00000040H
	jl	SHORT $LL7@setmessage
; Line 150
	mov	al, BYTE PTR _s$[ebp+2]
	test	al, al
	je	SHORT $LN1@setmessage
; Line 153
	xor	ecx, ecx
	cmp	BYTE PTR _s$[ebp+1], al
	mov	eax, DWORD PTR _inlen$[ebp]
	setne	cl
; Line 154
	push	56					; 00000038H
	shr	eax, 6
	pop	esi
	push	ebx
	lea	edi, DWORD PTR [ecx+1]
	add	edi, eax
$LL3@setmessage:
; Line 155
	push	63					; 0000003fH
	pop	ecx
	sub	ecx, esi
	shl	ecx, 3
	mov	ebx, edi
	shr	ebx, cl
	mov	ecx, esi
	and	ecx, -2147483641			; 80000007H
	jns	SHORT $LN24@setmessage
	dec	ecx
	or	ecx, -8					; fffffff8H
	inc	ecx
$LN24@setmessage:
	mov	eax, esi
	cdq
	and	edx, 7
	add	eax, edx
	sar	eax, 3
	add	eax, DWORD PTR _buffer$[ebp]
	inc	esi
	mov	BYTE PTR [eax+ecx*8], bl
	cmp	esi, 64					; 00000040H
	jl	SHORT $LL3@setmessage
	pop	ebx
$LN1@setmessage:
	pop	edi
	pop	esi
; Line 158
	pop	ebp
	ret	0
_setmessage ENDP
_TEXT	ENDS
PUBLIC	_crypto_hash
; Function compile flags: /Ogspy
;	COMDAT _crypto_hash
_TEXT	SEGMENT
_buffer$ = -32						; size = 64
_ctx$ = 32						; size = 64
_rlen$ = 96						; size = 8
_s$ = 104						; size = 3
_out$ = 116						; size = 4
_in$ = 120						; size = 4
_inlen$ = 124						; size = 4
_crypto_hash PROC					; COMDAT
; Line 161
	push	ebp
	lea	ebp, DWORD PTR [esp-108]
	sub	esp, 140				; 0000008cH
; Line 164
	mov	eax, DWORD PTR _inlen$[ebp]
	push	ebx
	push	esi
	push	edi
	xor	ebx, ebx
; Line 170
	push	16					; 00000010H
	mov	DWORD PTR _rlen$[ebp], eax
	pop	ecx
	xor	eax, eax
	lea	edi, DWORD PTR _ctx$[ebp]
	rep stosd
	mov	DWORD PTR _rlen$[ebp+4], ebx
	mov	WORD PTR _s$[ebp], 64			; 00000040H
	mov	BYTE PTR _s$[ebp+2], bl
; Line 171
	mov	BYTE PTR _ctx$[ebp+55], 1
; Line 172
	mov	BYTE PTR _ctx$[ebp+63], bl
$LL12@crypto_has:
; Line 177
	cmp	DWORD PTR _rlen$[ebp+4], ebx
	ja	SHORT $LN57@crypto_has
	jb	SHORT $LN56@crypto_has
	cmp	DWORD PTR _rlen$[ebp], 64		; 00000040H
	jae	SHORT $LN57@crypto_has
$LN56@crypto_has:
; Line 179
	cmp	BYTE PTR _s$[ebp+1], bl
	jne	SHORT $LN9@crypto_has
; Line 181
	mov	al, BYTE PTR _rlen$[ebp]
; Line 183
	cmp	al, 56					; 00000038H
	mov	BYTE PTR _s$[ebp], al
	mov	BYTE PTR _s$[ebp+1], 1
	setb	BYTE PTR _s$[ebp+2]
; Line 185
	jmp	SHORT $LN7@crypto_has
$LN9@crypto_has:
; Line 187
	mov	WORD PTR _s$[ebp], bx
; Line 189
	mov	BYTE PTR _s$[ebp+2], 1
; Line 192
	jmp	SHORT $LN7@crypto_has
$LN57@crypto_has:
; Line 193
	add	DWORD PTR _rlen$[ebp], -64		; ffffffc0H
	adc	DWORD PTR _rlen$[ebp+4], -1
$LN7@crypto_has:
; Line 196
	push	DWORD PTR _inlen$[ebp]
	lea	esi, DWORD PTR _s$[ebp]
	push	ecx
	mov	edi, esp
	push	DWORD PTR _in$[ebp]
	movsw
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	movsb
	call	_setmessage
	add	esp, 16					; 00000010H
; Line 197
	push	16					; 00000010H
	pop	ecx
	xor	eax, eax
$LL19@crypto_has:
	mov	edx, DWORD PTR _ctx$[ebp+eax]
	xor	DWORD PTR _buffer$[ebp+eax], edx
	dec	ecx
	add	eax, 4
	cmp	ecx, ebx
	jne	SHORT $LL19@crypto_has
; Line 198
	lea	eax, DWORD PTR _buffer$[ebp]
	push	ebx
	push	eax
	call	_permutation
	pop	ecx
	pop	ecx
; Line 199
	push	16					; 00000010H
	pop	ecx
	xor	eax, eax
$LL23@crypto_has:
	mov	edx, DWORD PTR _buffer$[ebp+eax]
	xor	DWORD PTR _ctx$[ebp+eax], edx
	dec	ecx
	add	eax, 4
	cmp	ecx, ebx
	jne	SHORT $LL23@crypto_has
; Line 201
	push	DWORD PTR _inlen$[ebp]
	lea	esi, DWORD PTR _s$[ebp]
	push	ecx
	mov	edi, esp
	push	DWORD PTR _in$[ebp]
	movsw
	lea	eax, DWORD PTR _buffer$[ebp]
	push	eax
	movsb
	call	_setmessage
; Line 202
	lea	eax, DWORD PTR _buffer$[ebp]
	push	1
	push	eax
	call	_permutation
	add	esp, 24					; 00000018H
; Line 203
	push	16					; 00000010H
	pop	ecx
	xor	eax, eax
$LL27@crypto_has:
	mov	edx, DWORD PTR _buffer$[ebp+eax]
	xor	DWORD PTR _ctx$[ebp+eax], edx
	dec	ecx
	add	eax, 4
	cmp	ecx, ebx
	jne	SHORT $LL27@crypto_has
; Line 206
	add	DWORD PTR _in$[ebp], 64			; 00000040H
	cmp	BYTE PTR _s$[ebp+2], bl
	je	$LL12@crypto_has
; Line 211
	push	16					; 00000010H
	pop	ecx
; Line 212
	lea	eax, DWORD PTR _buffer$[ebp]
	push	ebx
	lea	esi, DWORD PTR _ctx$[ebp]
	lea	edi, DWORD PTR _buffer$[ebp]
	push	eax
	rep movsd
	call	_permutation
	pop	ecx
	pop	ecx
; Line 213
	push	16					; 00000010H
	pop	ecx
	xor	eax, eax
$LL31@crypto_has:
	mov	edx, DWORD PTR _buffer$[ebp+eax]
	xor	DWORD PTR _ctx$[ebp+eax], edx
	dec	ecx
	add	eax, 4
	cmp	ecx, ebx
	jne	SHORT $LL31@crypto_has
; Line 216
	push	32					; 00000020H
	pop	eax
	mov	ecx, eax
$LL3@crypto_has:
; Line 217
	mov	edx, eax
	and	edx, -2147483641			; 80000007H
	jns	SHORT $LN58@crypto_has
	dec	edx
	or	edx, -8					; fffffff8H
	inc	edx
$LN58@crypto_has:
	mov	esi, eax
	shr	esi, 3
	lea	esi, DWORD PTR _ctx$[ebp+esi]
	mov	dl, BYTE PTR [esi+edx*8]
	mov	esi, DWORD PTR _out$[ebp]
	mov	BYTE PTR [esi+eax-32], dl
	inc	eax
	dec	ecx
	jne	SHORT $LL3@crypto_has
; Line 220
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
	add	ebp, 108				; 0000006cH
	leave
	ret	0
_crypto_hash ENDP
_TEXT	ENDS
END
