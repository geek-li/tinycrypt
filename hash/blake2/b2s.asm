; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\odzhan\tinycrypt\hash\blake2\b2s.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_b2s_g
; Function compile flags: /Ogspy
;	COMDAT _b2s_g
_TEXT	SEGMENT
_x$ = 8							; size = 4
_c$ = 12						; size = 4
_index$ = 12						; size = 2
_x0$ = 16						; size = 4
_x1$ = 20						; size = 4
_b2s_g	PROC						; COMDAT
; File c:\odzhan\tinycrypt\hash\blake2\b2s.c
; Line 35
	push	ebp
	mov	ebp, esp
; Line 38
	movzx	eax, WORD PTR _index$[ebp]
; Line 40
	mov	ecx, eax
	shr	ecx, 8
	mov	edx, eax
	and	ecx, 15					; 0000000fH
	push	ebx
	push	esi
	mov	esi, eax
	and	esi, 15					; 0000000fH
; Line 41
	shr	eax, 12					; 0000000cH
	shr	edx, 4
	and	edx, 15					; 0000000fH
	mov	DWORD PTR _c$[ebp], ecx
; Line 43
	mov	ecx, DWORD PTR _x$[ebp]
; Line 46
	mov	ebx, DWORD PTR _c$[ebp]
	lea	edx, DWORD PTR [ecx+edx*4]
	push	edi
	mov	edi, eax
	lea	eax, DWORD PTR [ecx+esi*4]
	mov	esi, DWORD PTR [edx]
	add	esi, DWORD PTR _x0$[ebp]
	lea	edi, DWORD PTR [ecx+edi*4]
	add	DWORD PTR [eax], esi
	mov	esi, DWORD PTR [edi]
	xor	esi, DWORD PTR [eax]
	lea	ecx, DWORD PTR [ecx+ebx*4]
	rol	esi, 16					; 00000010H
	mov	DWORD PTR [edi], esi
	add	DWORD PTR [ecx], esi
; Line 47
	mov	esi, DWORD PTR [edx]
	xor	esi, DWORD PTR [ecx]
	ror	esi, 12					; 0000000cH
	mov	DWORD PTR [edx], esi
; Line 49
	add	esi, DWORD PTR _x1$[ebp]
	add	DWORD PTR [eax], esi
	mov	eax, DWORD PTR [eax]
; Line 50
	mov	esi, DWORD PTR [edi]
	xor	esi, eax
	ror	esi, 8
	mov	DWORD PTR [edi], esi
; Line 52
	add	DWORD PTR [ecx], esi
	mov	ecx, DWORD PTR [ecx]
; Line 53
	mov	eax, DWORD PTR [edx]
	pop	edi
	xor	eax, ecx
	ror	eax, 7
	pop	esi
	mov	DWORD PTR [edx], eax
	pop	ebx
; Line 54
	pop	ebp
	ret	0
_b2s_g	ENDP
_TEXT	ENDS
PUBLIC	_b2s_compress
; Function compile flags: /Ogspy
;	COMDAT _b2s_compress
_TEXT	SEGMENT
_v$ = -120						; size = 64
_m$ = -56						; size = 64
_b2s_iv$ = -24						; size = 32
_x$ = 8							; size = 8
_sigma64$ = 16						; size = 80
_idx16$ = 96						; size = 16
_i$ = 120						; size = 4
_ctx$ = 120						; size = 4
_last$ = 124						; size = 4
_b2s_compress PROC					; COMDAT
; Line 58
	push	ebp
	lea	ebp, DWORD PTR [esp-112]
	sub	esp, 232				; 000000e8H
; Line 70
	mov	eax, 51264				; 0000c840H
	mov	WORD PTR _idx16$[ebp], ax
	mov	eax, 55633				; 0000d951H
	mov	WORD PTR _idx16$[ebp+2], ax
	mov	eax, 60002				; 0000ea62H
	mov	WORD PTR _idx16$[ebp+4], ax
	mov	eax, 64371				; 0000fb73H
	mov	WORD PTR _idx16$[ebp+6], ax
; Line 71
	mov	eax, 64080				; 0000fa50H
	mov	WORD PTR _idx16$[ebp+8], ax
	mov	eax, 52065				; 0000cb61H
	mov	WORD PTR _idx16$[ebp+10], ax
	mov	eax, 55410				; 0000d872H
	mov	WORD PTR _idx16$[ebp+12], ax
	push	ebx
; Line 83
	mov	ebx, DWORD PTR _ctx$[ebp]
	mov	eax, 59715				; 0000e943H
	mov	WORD PTR _idx16$[ebp+14], ax
	lea	eax, DWORD PTR _v$[ebp]
	mov	edx, ebx
	push	esi
	sub	edx, eax
	push	edi
	mov	DWORD PTR _b2s_iv$[ebp], 1779033703	; 6a09e667H
	mov	DWORD PTR _b2s_iv$[ebp+4], -1150833019	; bb67ae85H
	mov	DWORD PTR _b2s_iv$[ebp+8], 1013904242	; 3c6ef372H
	mov	DWORD PTR _b2s_iv$[ebp+12], -1521486534	; a54ff53aH
	mov	DWORD PTR _b2s_iv$[ebp+16], 1359893119	; 510e527fH
	mov	DWORD PTR _b2s_iv$[ebp+20], -1694144372	; 9b05688cH
	mov	DWORD PTR _b2s_iv$[ebp+24], 528734635	; 1f83d9abH
	mov	DWORD PTR _b2s_iv$[ebp+28], 1541459225	; 5be0cd19H
	mov	DWORD PTR _sigma64$[ebp], 1985229328	; 76543210H
	mov	DWORD PTR _sigma64$[ebp+4], -19088744	; fedcba98H
	mov	DWORD PTR _sigma64$[ebp+8], 1845068974	; 6df984aeH
	mov	DWORD PTR _sigma64$[ebp+12], 897261761	; 357b20c1H
	mov	DWORD PTR _sigma64$[ebp+16], -551220085	; df250c8bH
	mov	DWORD PTR _sigma64$[ebp+20], 1226269674	; 491763eaH
	mov	DWORD PTR _sigma64$[ebp+24], -338881641	; ebcd1397H
	mov	DWORD PTR _sigma64$[ebp+28], -1895520926 ; 8f04a562H
	mov	DWORD PTR _sigma64$[ebp+32], -96307959	; fa427509H
	mov	DWORD PTR _sigma64$[ebp+36], -746140898	; d386cb1eH
	mov	DWORD PTR _sigma64$[ebp+40], 951101122	; 38b0a6c2H
	mov	DWORD PTR _sigma64$[ebp+44], -1846585388 ; 91ef57d4H
	mov	DWORD PTR _sigma64$[ebp+48], -1528893092 ; a4def15cH
	mov	DWORD PTR _sigma64$[ebp+52], -1205258640 ; b8293670H
	mov	DWORD PTR _sigma64$[ebp+56], -1826822211 ; 931ce7bdH
	mov	DWORD PTR _sigma64$[ebp+60], -1570222331 ; a2684f05H
	mov	DWORD PTR _sigma64$[ebp+64], -2143576330 ; 803b9ef6H
	mov	DWORD PTR _sigma64$[ebp+68], 1514241324	; 5a417d2cH
	mov	DWORD PTR _sigma64$[ebp+72], 1365723178	; 5167482aH
	mov	DWORD PTR _sigma64$[ebp+76], 230943167	; 0dc3e9bfH
	xor	eax, eax
$LL16@b2s_compre:
	lea	ecx, DWORD PTR _v$[ebp+eax]
	mov	esi, DWORD PTR [edx+ecx]
	mov	DWORD PTR [ecx], esi
; Line 84
	mov	ecx, DWORD PTR _b2s_iv$[ebp+eax]
	mov	DWORD PTR _v$[ebp+eax+32], ecx
	add	eax, 4
	cmp	eax, 32					; 00000020H
	jb	SHORT $LL16@b2s_compre
; Line 93
	mov	eax, DWORD PTR [ebx+128]
	xor	DWORD PTR _v$[ebp+48], eax
; Line 94
	mov	eax, DWORD PTR [ebx+132]
	xor	DWORD PTR _v$[ebp+52], eax
; Line 97
	cmp	DWORD PTR _last$[ebp], 0
	push	16					; 00000010H
	lea	esi, DWORD PTR [ebx+64]
	pop	ecx
	lea	edi, DWORD PTR _m$[ebp]
	rep movsd
	je	SHORT $LN10@b2s_compre
; Line 98
	not	DWORD PTR _v$[ebp+56]
$LN10@b2s_compre:
; Line 104
	mov	eax, DWORD PTR [ebx+144]
	and	DWORD PTR _i$[ebp], 0
	test	eax, eax
	je	SHORT $LN7@b2s_compre
$LL29@b2s_compre:
; Line 105
	mov	eax, DWORD PTR _i$[ebp]
	push	10					; 0000000aH
	xor	edx, edx
	pop	ecx
	div	ecx
; Line 107
	xor	esi, esi
	mov	edi, DWORD PTR _sigma64$[ebp+edx*8]
	mov	eax, DWORD PTR _sigma64$[ebp+edx*8+4]
	jmp	SHORT $LN6@b2s_compre
$LL30@b2s_compre:
	mov	eax, DWORD PTR _x$[ebp+4]
$LN6@b2s_compre:
; Line 108
	mov	ecx, edi
	shrd	edi, eax, 4
	shr	eax, 4
; Line 109
	mov	edx, edi
	shrd	edi, eax, 4
	shr	eax, 4
	and	edx, 15					; 0000000fH
; Line 110
	push	DWORD PTR _m$[ebp+edx*4]
	mov	DWORD PTR _x$[ebp+4], eax
	movzx	eax, WORD PTR _idx16$[ebp+esi*2]
	and	ecx, 15					; 0000000fH
	push	DWORD PTR _m$[ebp+ecx*4]
	push	eax
	lea	eax, DWORD PTR _v$[ebp]
	push	eax
	call	_b2s_g
	add	esp, 16					; 00000010H
	inc	esi
	cmp	esi, 8
	jb	SHORT $LL30@b2s_compre
; Line 104
	inc	DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	cmp	eax, DWORD PTR [ebx+144]
	jb	SHORT $LL29@b2s_compre
$LN7@b2s_compre:
; Line 114
	lea	ecx, DWORD PTR _v$[ebp]
	push	8
	mov	eax, ebx
	sub	ecx, ebx
	pop	edx
$LL3@b2s_compre:
; Line 115
	mov	esi, DWORD PTR [ecx+eax+32]
	xor	esi, DWORD PTR [eax]
	xor	esi, DWORD PTR [ecx+eax]
	mov	DWORD PTR [eax], esi
	add	eax, 4
	dec	edx
	jne	SHORT $LL3@b2s_compre
	pop	edi
	pop	esi
	pop	ebx
; Line 117
	add	ebp, 112				; 00000070H
	leave
	ret	0
_b2s_compress ENDP
_TEXT	ENDS
PUBLIC	_b2s_init
; Function compile flags: /Ogspy
;	COMDAT _b2s_init
_TEXT	SEGMENT
_b2s_iv$ = -32						; size = 32
_ctx$ = 8						; size = 4
_outlen$ = 12						; size = 4
_key$ = 16						; size = 4
_keylen$ = 20						; size = 4
_rnds$ = 24						; size = 4
_b2s_init PROC						; COMDAT
; Line 122
	push	ebp
	mov	ebp, esp
	sub	esp, 32					; 00000020H
	push	ebx
; Line 131
	mov	ebx, DWORD PTR _outlen$[ebp]
	push	esi
	push	edi
	push	32					; 00000020H
	mov	DWORD PTR _b2s_iv$[ebp], 1779033703	; 6a09e667H
	mov	DWORD PTR _b2s_iv$[ebp+4], -1150833019	; bb67ae85H
	mov	DWORD PTR _b2s_iv$[ebp+8], 1013904242	; 3c6ef372H
	mov	DWORD PTR _b2s_iv$[ebp+12], -1521486534	; a54ff53aH
	mov	DWORD PTR _b2s_iv$[ebp+16], 1359893119	; 510e527fH
	mov	DWORD PTR _b2s_iv$[ebp+20], -1694144372	; 9b05688cH
	mov	DWORD PTR _b2s_iv$[ebp+24], 528734635	; 1f83d9abH
	mov	DWORD PTR _b2s_iv$[ebp+28], 1541459225	; 5be0cd19H
	pop	eax
	test	ebx, ebx
	je	SHORT $LN12@b2s_init
	cmp	ebx, eax
	jbe	SHORT $LN13@b2s_init
$LN12@b2s_init:
	mov	ebx, eax
$LN13@b2s_init:
; Line 133
	cmp	DWORD PTR _keylen$[ebp], eax
	jbe	SHORT $LN14@b2s_init
	mov	DWORD PTR _keylen$[ebp], eax
$LN14@b2s_init:
; Line 137
	mov	edx, DWORD PTR _ctx$[ebp]
; Line 142
	mov	eax, DWORD PTR _keylen$[ebp]
	xor	eax, 65792				; 00010100H
	shl	eax, 8
	push	8
	pop	ecx
	lea	esi, DWORD PTR _b2s_iv$[ebp]
	mov	edi, edx
	rep movsd
	xor	eax, DWORD PTR [edx]
; Line 146
	push	16					; 00000010H
	xor	eax, ebx
	mov	DWORD PTR [edx], eax
	xor	eax, eax
	pop	ecx
	lea	edi, DWORD PTR [edx+64]
	rep stosd
; Line 152
	mov	eax, DWORD PTR _keylen$[ebp]
	xor	ecx, ecx
	neg	eax
	sbb	eax, eax
	and	eax, 64					; 00000040H
	mov	DWORD PTR [edx+136], eax
; Line 157
	mov	eax, DWORD PTR _rnds$[ebp]
	mov	DWORD PTR [edx+128], ecx
	mov	DWORD PTR [edx+132], ecx
	mov	DWORD PTR [edx+140], ebx
	cmp	eax, 10					; 0000000aH
	jae	SHORT $LN16@b2s_init
	push	10					; 0000000aH
	pop	eax
$LN16@b2s_init:
	mov	DWORD PTR [edx+144], eax
; Line 160
	xor	eax, eax
	cmp	DWORD PTR _keylen$[ebp], ecx
	jbe	SHORT $LN1@b2s_init
$LL3@b2s_init:
; Line 161
	mov	ecx, DWORD PTR _key$[ebp]
	mov	cl, BYTE PTR [eax+ecx]
	mov	BYTE PTR [edx+eax+64], cl
	inc	eax
	cmp	eax, DWORD PTR _keylen$[ebp]
	jb	SHORT $LL3@b2s_init
$LN1@b2s_init:
	pop	edi
	pop	esi
	pop	ebx
; Line 163
	leave
	ret	0
_b2s_init ENDP
_TEXT	ENDS
PUBLIC	_b2s_update
; Function compile flags: /Ogspy
;	COMDAT _b2s_update
_TEXT	SEGMENT
_ctx$ = 8						; size = 4
_input$ = 12						; size = 4
_len$ = 16						; size = 4
_b2s_update PROC					; COMDAT
; Line 168
	push	ebp
	mov	ebp, esp
	push	ebx
; Line 172
	xor	ebx, ebx
	cmp	DWORD PTR _len$[ebp], ebx
	je	SHORT $LN2@b2s_update
; Line 175
	push	edi
	xor	edi, edi
	cmp	DWORD PTR _len$[ebp], ebx
	jbe	SHORT $LN10@b2s_update
	push	esi
	mov	esi, DWORD PTR _ctx$[ebp]
$LL4@b2s_update:
; Line 176
	cmp	DWORD PTR [esi+136], 64			; 00000040H
	jne	SHORT $LN1@b2s_update
; Line 177
	add	DWORD PTR [esi+128], 64			; 00000040H
; Line 178
	push	ebx
	push	esi
	adc	DWORD PTR [esi+132], ebx
	call	_b2s_compress
	pop	ecx
	pop	ecx
; Line 179
	mov	DWORD PTR [esi+136], ebx
$LN1@b2s_update:
; Line 181
	mov	ecx, DWORD PTR _input$[ebp]
	mov	cl, BYTE PTR [edi+ecx]
	mov	eax, DWORD PTR [esi+136]
	mov	BYTE PTR [eax+esi+64], cl
	inc	DWORD PTR [esi+136]
	inc	edi
	cmp	edi, DWORD PTR _len$[ebp]
	jb	SHORT $LL4@b2s_update
	pop	esi
$LN10@b2s_update:
	pop	edi
$LN2@b2s_update:
	pop	ebx
; Line 183
	pop	ebp
	ret	0
_b2s_update ENDP
_TEXT	ENDS
PUBLIC	_b2s_final
; Function compile flags: /Ogspy
;	COMDAT _b2s_final
_TEXT	SEGMENT
_out$ = 8						; size = 4
_ctx$ = 12						; size = 4
_b2s_final PROC						; COMDAT
; Line 187
	push	esi
; Line 191
	mov	esi, DWORD PTR _ctx$[esp]
	mov	ecx, DWORD PTR [esi+136]
	add	DWORD PTR [esi+128], ecx
	push	edi
	adc	DWORD PTR [esi+132], 0
; Line 194
	cmp	ecx, 64					; 00000040H
	jae	SHORT $LN4@b2s_final
$LL5@b2s_final:
; Line 195
	mov	eax, DWORD PTR [esi+136]
	mov	BYTE PTR [esi+eax+64], 0
	inc	DWORD PTR [esi+136]
	cmp	DWORD PTR [esi+136], 64			; 00000040H
	jb	SHORT $LL5@b2s_final
$LN4@b2s_final:
; Line 199
	push	1
	push	esi
	call	_b2s_compress
; Line 202
	xor	edi, edi
	pop	ecx
	pop	ecx
	cmp	DWORD PTR [esi+140], edi
	jbe	SHORT $LN1@b2s_final
	mov	eax, DWORD PTR _out$[esp+4]
	mov	ecx, esi
	sub	ecx, eax
$LL3@b2s_final:
; Line 203
	mov	dl, BYTE PTR [ecx+eax]
	mov	BYTE PTR [eax], dl
	inc	edi
	inc	eax
	cmp	edi, DWORD PTR [esi+140]
	jb	SHORT $LL3@b2s_final
$LN1@b2s_final:
	pop	edi
	pop	esi
; Line 205
	ret	0
_b2s_final ENDP
_TEXT	ENDS
END
