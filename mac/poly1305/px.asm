; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\odzhan\tinycrypt\mac\poly1305\px.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_poly1305_add
; Function compile flags: /Ogspy
;	COMDAT _poly1305_add
_TEXT	SEGMENT
_out$ = 8						; size = 4
_in$ = 12						; size = 4
_inlen$ = 16						; size = 4
_last$ = 20						; size = 1
_poly1305_add PROC					; COMDAT
; File c:\odzhan\tinycrypt\mac\poly1305\px.c
; Line 47
	push	ebp
	mov	ebp, esp
	push	ebx
	push	esi
; Line 49
	mov	esi, DWORD PTR _in$[ebp]
	xor	ebx, ebx
	push	edi
; Line 52
	xor	edx, edx
$LL12@poly1305_a:
; Line 53
	movzx	eax, BYTE PTR [esi]
; Line 54
	cmp	DWORD PTR _inlen$[ebp], edx
	jne	SHORT $LN13@poly1305_a
	movzx	eax, BYTE PTR _last$[ebp]
$LN13@poly1305_a:
; Line 55
	sbb	ecx, ecx
	not	ecx
	and	ecx, eax
; Line 56
	cmp	edx, DWORD PTR _inlen$[ebp]
	jae	SHORT $LN8@poly1305_a
	inc	esi
$LN8@poly1305_a:
; Line 52
	mov	eax, DWORD PTR _out$[ebp]
	lea	eax, DWORD PTR [eax+edx*4]
; Line 58
	mov	edi, DWORD PTR [eax]
	add	edi, ecx
	add	ebx, edi
; Line 59
	movzx	ecx, bl
; Line 60
	shr	ebx, 8
	inc	edx
	mov	DWORD PTR [eax], ecx
	cmp	edx, 17					; 00000011H
	jb	SHORT $LL12@poly1305_a
	pop	edi
	pop	esi
	pop	ebx
; Line 62
	pop	ebp
	ret	0
_poly1305_add ENDP
_TEXT	ENDS
PUBLIC	_poly1305_mulmod
; Function compile flags: /Ogspy
;	COMDAT _poly1305_mulmod
_TEXT	SEGMENT
_hr$ = -72						; size = 68
tv526 = -4						; size = 4
_i$ = 8							; size = 4
_acc$ = 8						; size = 4
_r$ = 12						; size = 4
_poly1305_mulmod PROC					; COMDAT
; Line 74
	push	ebp
	mov	ebp, esp
	sub	esp, 72					; 00000048H
	push	ebx
; Line 78
	mov	ebx, DWORD PTR _acc$[ebp]
; Line 81
	and	DWORD PTR _i$[ebp], 0
	push	esi
	push	edi
	push	68					; 00000044H
	lea	edi, DWORD PTR _hr$[ebp]
	mov	esi, ebx
	pop	ecx
	rep movsb
	mov	ecx, DWORD PTR _r$[ebp]
	sub	ecx, ebx
	mov	edx, ebx
	mov	DWORD PTR tv526[ebp], ecx
	jmp	SHORT $LN16@poly1305_m
$LL29@poly1305_m:
	mov	ecx, DWORD PTR tv526[ebp]
$LN16@poly1305_m:
; Line 82
	xor	esi, esi
; Line 83
	xor	eax, eax
	add	ecx, edx
$LL13@poly1305_m:
; Line 84
	mov	edi, DWORD PTR _hr$[ebp+eax*4]
	imul	edi, DWORD PTR [ecx]
	add	esi, edi
	inc	eax
	sub	ecx, 4
	cmp	eax, DWORD PTR _i$[ebp]
	jbe	SHORT $LL13@poly1305_m
; Line 86
	cmp	eax, 17					; 00000011H
	jae	SHORT $LN30@poly1305_m
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edi, DWORD PTR _r$[ebp]
	sub	ecx, eax
	lea	ecx, DWORD PTR [edi+ecx*4+68]
$LL10@poly1305_m:
; Line 87
	mov	edi, DWORD PTR _hr$[ebp+eax*4]
	imul	edi, DWORD PTR [ecx]
	imul	edi, 320				; 00000140H
	add	esi, edi
	inc	eax
	sub	ecx, 4
	cmp	eax, 17					; 00000011H
	jb	SHORT $LL10@poly1305_m
$LN30@poly1305_m:
; Line 81
	inc	DWORD PTR _i$[ebp]
; Line 89
	mov	DWORD PTR [edx], esi
	add	edx, 4
	cmp	DWORD PTR _i$[ebp], 17			; 00000011H
	jb	SHORT $LL29@poly1305_m
; Line 92
	xor	eax, eax
	xor	edx, edx
$LL7@poly1305_m:
; Line 94
	xor	ecx, ecx
$LL4@poly1305_m:
; Line 96
	add	eax, DWORD PTR [ebx+ecx*4]
; Line 97
	movzx	esi, al
; Line 98
	shr	eax, 8
	mov	DWORD PTR [ebx+ecx*4], esi
	inc	ecx
	cmp	ecx, 16					; 00000010H
	jb	SHORT $LL4@poly1305_m
; Line 100
	test	edx, edx
	jne	SHORT $LN6@poly1305_m
; Line 102
	add	eax, DWORD PTR [ebx+64]
; Line 103
	mov	ecx, eax
	and	ecx, 3
; Line 104
	shr	eax, 2
	mov	DWORD PTR [ebx+64], ecx
	imul	eax, 5
$LN6@poly1305_m:
; Line 92
	inc	edx
	cmp	edx, 2
	jb	SHORT $LL7@poly1305_m
; Line 107
	add	DWORD PTR [ebx+64], eax
	pop	edi
	pop	esi
	pop	ebx
; Line 108
	leave
	ret	0
_poly1305_mulmod ENDP
_TEXT	ENDS
PUBLIC	_poly1305_mac
; Function compile flags: /Ogspy
;	COMDAT _poly1305_mac
_TEXT	SEGMENT
_acc$ = -48						; size = 68
_minusp$ = 20						; size = 16
_r$ = 36						; size = 68
_out$ = 112						; size = 4
_in$ = 116						; size = 4
_inlen$ = 120						; size = 4
_k$ = 124						; size = 4
_poly1305_mac PROC					; COMDAT
; Line 120
	push	ebp
	lea	ebp, DWORD PTR [esp-104]
	sub	esp, 152				; 00000098H
	push	ebx
; Line 123
	xor	eax, eax
	push	esi
	push	edi
	mov	BYTE PTR _minusp$[ebp], 5
	lea	edi, DWORD PTR _minusp$[ebp+1]
	stosd
	stosd
	stosd
	stosw
	stosb
; Line 126
	xor	eax, eax
$LL12@poly1305_m@2:
; Line 127
	mov	ecx, DWORD PTR _k$[ebp]
	movzx	ecx, BYTE PTR [eax+ecx]
	mov	DWORD PTR _r$[ebp+eax*4], ecx
	inc	eax
	cmp	eax, 16					; 00000010H
	jb	SHORT $LL12@poly1305_m@2
; Line 146
	mov	esi, DWORD PTR _inlen$[ebp]
	and	DWORD PTR _r$[ebp+64], 0
	push	15					; 0000000fH
	pop	eax
	and	DWORD PTR _r$[ebp+12], eax
	and	DWORD PTR _r$[ebp+28], eax
	and	DWORD PTR _r$[ebp+44], eax
	and	DWORD PTR _r$[ebp+60], eax
	mov	ebx, 252				; 000000fcH
	and	DWORD PTR _r$[ebp+16], ebx
	and	DWORD PTR _r$[ebp+32], ebx
	and	DWORD PTR _r$[ebp+48], ebx
	push	68					; 00000044H
	xor	al, al
	lea	edi, DWORD PTR _acc$[ebp]
	pop	ecx
	rep stosb
	test	esi, esi
	je	SHORT $LN22@poly1305_m@2
$LL9@poly1305_m@2:
; Line 149
	push	16					; 00000010H
	pop	edi
	cmp	esi, edi
	jae	SHORT $LN15@poly1305_m@2
	mov	edi, esi
$LN15@poly1305_m@2:
; Line 152
	push	1
	push	edi
	push	DWORD PTR _in$[ebp]
	lea	eax, DWORD PTR _acc$[ebp]
	push	eax
	call	_poly1305_add
; Line 155
	lea	eax, DWORD PTR _r$[ebp]
	push	eax
	lea	eax, DWORD PTR _acc$[ebp]
	push	eax
	call	_poly1305_mulmod
; Line 158
	add	DWORD PTR _in$[ebp], edi
	add	esp, 24					; 00000018H
; Line 159
	sub	esi, edi
	jne	SHORT $LL9@poly1305_m@2
$LN22@poly1305_m@2:
; Line 162
	push	68					; 00000044H
	pop	ecx
; Line 164
	push	ebx
	push	16					; 00000010H
	lea	eax, DWORD PTR _minusp$[ebp]
	push	eax
	lea	eax, DWORD PTR _acc$[ebp]
	lea	esi, DWORD PTR _acc$[ebp]
	lea	edi, DWORD PTR _r$[ebp]
	push	eax
	rep movsb
	call	_poly1305_add
; Line 165
	mov	eax, DWORD PTR _acc$[ebp+64]
	shr	eax, 7
	add	esp, 16					; 00000010H
	neg	eax
; Line 167
	xor	ecx, ecx
$LL6@poly1305_m@2:
; Line 168
	mov	edi, DWORD PTR _r$[ebp+ecx]
	lea	edx, DWORD PTR _acc$[ebp+ecx]
	mov	esi, DWORD PTR [edx]
	xor	edi, esi
	and	edi, eax
	xor	edi, esi
	add	ecx, 4
	mov	DWORD PTR [edx], edi
	cmp	ecx, 68					; 00000044H
	jb	SHORT $LL6@poly1305_m@2
; Line 172
	mov	eax, DWORD PTR _k$[ebp]
	push	0
	add	eax, 16					; 00000010H
	push	16					; 00000010H
	push	eax
	lea	eax, DWORD PTR _acc$[ebp]
	push	eax
	call	_poly1305_add
	add	esp, 16					; 00000010H
	pop	edi
	pop	esi
; Line 175
	xor	eax, eax
	pop	ebx
$LL3@poly1305_m@2:
; Line 176
	mov	cl, BYTE PTR _acc$[ebp+eax*4]
	mov	edx, DWORD PTR _out$[ebp]
	mov	BYTE PTR [eax+edx], cl
	inc	eax
	cmp	eax, 16					; 00000010H
	jb	SHORT $LL3@poly1305_m@2
; Line 178
	add	ebp, 104				; 00000068H
	leave
	ret	0
_poly1305_mac ENDP
_TEXT	ENDS
END
