; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

	TITLE	C:\hub\cubemac\cubem.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_permute
; Function compile flags: /Ogspy
;	COMDAT _permute
_TEXT	SEGMENT
_y$ = -84						; size = 64
tv383 = -20						; size = 4
_n$ = -16						; size = 4
_j$ = -12						; size = 4
_k$ = -8						; size = 4
tv692 = -4						; size = 4
_s$ = 8							; size = 4
_permute PROC						; COMDAT
; File c:\hub\cubemac\cubem.c
; Line 35
	push	ebp
	mov	ebp, esp
	sub	esp, 84					; 00000054H
	push	ebx
	push	esi
; Line 39
	mov	esi, DWORD PTR _s$[ebp]
	push	edi
	lea	eax, DWORD PTR _y$[ebp]
	sub	eax, esi
	push	4
	mov	DWORD PTR _n$[ebp], 16			; 00000010H
	mov	DWORD PTR tv383[ebp], eax
	pop	edi
$LL43@permute:
; Line 41
	mov	DWORD PTR _k$[ebp], 7
	mov	DWORD PTR _j$[ebp], 2
	mov	DWORD PTR tv692[ebp], 8
$LL44@permute:
; Line 43
	push	15					; 0000000fH
	pop	edx
	lea	eax, DWORD PTR [esi+124]
$LL18@permute:
	mov	ecx, DWORD PTR [eax-64]
	add	DWORD PTR [eax], ecx
	sub	eax, edi
	dec	edx
	jns	SHORT $LL18@permute
; Line 44
	push	15					; 0000000fH
	pop	eax
$LL15@permute:
	mov	ecx, DWORD PTR tv692[ebp]
	mov	edx, DWORD PTR [esi+eax*4]
	xor	ecx, eax
	dec	eax
	mov	DWORD PTR _y$[ebp+ecx*4], edx
	jns	SHORT $LL15@permute
; Line 45
	push	15					; 0000000fH
	pop	edx
	lea	eax, DWORD PTR [esi+60]
$LL45@permute:
	mov	ecx, DWORD PTR tv383[ebp]
	mov	ebx, DWORD PTR [ecx+eax]
	mov	ecx, DWORD PTR _k$[ebp]
	rol	ebx, cl
	mov	DWORD PTR [eax], ebx
	sub	eax, edi
	dec	edx
	jns	SHORT $LL45@permute
; Line 47
	push	15					; 0000000fH
	pop	edx
$LL9@permute:
	mov	ecx, DWORD PTR [esi+edx*4+64]
	lea	eax, DWORD PTR [esi+edx*4]
	xor	DWORD PTR [eax], ecx
	dec	edx
	jns	SHORT $LL9@permute
; Line 48
	push	15					; 0000000fH
	pop	edx
	lea	eax, DWORD PTR [esi+124]
$LL6@permute:
	mov	ebx, DWORD PTR [eax]
	mov	ecx, edx
	xor	ecx, DWORD PTR _j$[ebp]
	sub	eax, edi
	dec	edx
	mov	DWORD PTR _y$[ebp+ecx*4], ebx
	jns	SHORT $LL6@permute
; Line 49
	push	15					; 0000000fH
	pop	eax
	lea	edx, DWORD PTR [esi+124]
$LL3@permute:
	mov	ecx, DWORD PTR _y$[ebp+eax*4]
	mov	DWORD PTR [edx], ecx
	sub	edx, edi
	dec	eax
	jns	SHORT $LL3@permute
; Line 41
	add	DWORD PTR _k$[ebp], edi
	sub	DWORD PTR tv692[ebp], edi
	dec	DWORD PTR _j$[ebp]
	cmp	DWORD PTR tv692[ebp], 0
	jg	SHORT $LL44@permute
; Line 39
	dec	DWORD PTR _n$[ebp]
	cmp	DWORD PTR _n$[ebp], 0
	jg	$LL43@permute
	pop	edi
	pop	esi
	pop	ebx
; Line 52
	leave
	ret	0
_permute ENDP
_TEXT	ENDS
PUBLIC	_absorb
; Function compile flags: /Ogspy
;	COMDAT _absorb
_TEXT	SEGMENT
_s$ = 8							; size = 4
_msg$ = 12						; size = 4
_len$ = 16						; size = 4
_absorb	PROC						; COMDAT
; Line 57
	push	esi
; Line 58
	xor	eax, eax
; Line 61
	xor	esi, esi
	cmp	DWORD PTR _len$[esp], eax
	jbe	SHORT $LN2@absorb
	push	edi
	mov	edi, DWORD PTR _s$[esp+4]
$LL4@absorb:
; Line 62
	mov	ecx, DWORD PTR _msg$[esp+4]
	mov	cl, BYTE PTR [esi+ecx]
	xor	BYTE PTR [eax+edi], cl
	inc	eax
; Line 63
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN3@absorb
; Line 64
	push	edi
	call	_permute
	pop	ecx
; Line 65
	xor	eax, eax
$LN3@absorb:
; Line 61
	inc	esi
	cmp	esi, DWORD PTR _len$[esp+4]
	jb	SHORT $LL4@absorb
	pop	edi
$LN2@absorb:
	pop	esi
; Line 69
	ret	0
_absorb	ENDP
_TEXT	ENDS
PUBLIC	_cube_macx
; Function compile flags: /Ogspy
;	COMDAT _cube_macx
_TEXT	SEGMENT
_s$ = -128						; size = 128
_mkey$ = 8						; size = 4
_keylen$ = 12						; size = 4
_msg$ = 16						; size = 4
_msglen$ = 20						; size = 4
_tag$ = 24						; size = 4
_cube_macx PROC						; COMDAT
; Line 74
	push	ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H
	push	esi
	push	edi
; Line 79
	xor	al, al
	lea	edi, DWORD PTR _s$[ebp]
	mov	ecx, 128				; 00000080H
	rep stosb
; Line 81
	push	16					; 00000010H
	pop	eax
	mov	DWORD PTR _s$[ebp], eax
; Line 83
	mov	DWORD PTR _s$[ebp+8], eax
; Line 85
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	mov	DWORD PTR _s$[ebp+4], 32		; 00000020H
	call	_permute
; Line 88
	push	DWORD PTR _keylen$[ebp]
	lea	eax, DWORD PTR _s$[ebp]
	push	DWORD PTR _mkey$[ebp]
	push	eax
	call	_absorb
; Line 91
	push	DWORD PTR _msglen$[ebp]
	lea	eax, DWORD PTR _s$[ebp]
	push	DWORD PTR _msg$[ebp]
	push	eax
	call	_absorb
; Line 94
	lea	eax, DWORD PTR _s$[ebp+eax]
	xor	BYTE PTR [eax], 128			; 00000080H
; Line 95
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_permute
; Line 98
	xor	DWORD PTR _s$[ebp+124], 1
; Line 100
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_permute
; Line 101
	lea	eax, DWORD PTR _s$[ebp]
	push	eax
	call	_permute
; Line 104
	mov	edi, DWORD PTR _tag$[ebp]
	lea	esi, DWORD PTR _s$[ebp]
	movsd
	movsd
	movsd
	add	esp, 40					; 00000028H
	movsd
	pop	edi
	pop	esi
; Line 105
	leave
	ret	0
_cube_macx ENDP
_TEXT	ENDS
END
